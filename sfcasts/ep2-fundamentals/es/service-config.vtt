WEBVTT

00:00:01.076 --> 00:00:03.886 align:middle
En tu terminal, ejecuta:
bin/console debug:container

00:00:03.886 --> 00:00:09.256 align:middle
--parameters Uno de los parámetros
de kernel se llama kernel.debug.

00:00:10.106 --> 00:00:14.696 align:middle
Además de los entornos, Symfony tiene
este concepto de "modo de depuración".

00:00:15.386 --> 00:00:19.056 align:middle
Es verdadero para el entorno
dev y falso para prod.

00:00:19.476 --> 00:00:21.906 align:middle
Y, de vez en cuando, ¡es muy útil!

00:00:22.746 --> 00:00:26.476 align:middle
He aquí nuestro nuevo reto (sobre
todo para ver si podemos hacerlo).

00:00:27.166 --> 00:00:31.666 align:middle
Dentro de MixRepository, quiero averiguar
si estamos en modo de depuración.

00:00:32.216 --> 00:00:36.246 align:middle
Si el modo de depuración es verdadero,
guardaremos el caché durante 5 segundos.

00:00:36.486 --> 00:00:41.896 align:middle
Si es falso, quiero almacenar en caché
durante 60 segundos Retrocedamos un minuto.

00:00:42.546 --> 00:00:46.026 align:middle
Supón que estás trabajando dentro
de un servicio como MixRepository.

00:00:46.656 --> 00:00:51.926 align:middle
De repente te das cuenta de que necesitas
algún otro servicio como el logger.

00:00:52.476 --> 00:00:54.326 align:middle
¿Qué haces para obtener el registrador?

00:00:55.046 --> 00:00:59.116 align:middle
La respuesta: haces el baile de
la inyección de dependencia.

00:00:59.646 --> 00:01:03.596 align:middle
Añades un argumento y una propiedad
de private LoggerInterface $logger...

00:01:03.976 --> 00:01:05.756 align:middle
y luego lo utilizas en tu código.

00:01:06.346 --> 00:01:09.146 align:middle
Harás esto muchas veces en Symfony.

00:01:09.906 --> 00:01:11.406 align:middle
Permíteme deshacer eso...

00:01:11.606 --> 00:01:14.986 align:middle
porque en realidad no necesitamos
el registrador ahora mismo.

00:01:15.516 --> 00:01:17.766 align:middle
Pero lo que sí necesitamos
es algo parecido. Ahora mismo

00:01:18.406 --> 00:01:23.116 align:middle
estamos dentro de un servicio y
de repente nos hemos dado cuenta

00:01:23.146 --> 00:01:29.366 align:middle
de que necesitamos alguna configuración (la
bandera kernel.debug ) para hacer nuestro trabajo.

00:01:30.146 --> 00:01:32.656 align:middle
¿Qué hacemos para
conseguir esa configuración?

00:01:33.376 --> 00:01:35.216 align:middle
Lo mismo

00:01:35.686 --> 00:01:37.786 align:middle
Añadirla como argumento a nuestro constructor.

00:01:38.286 --> 00:01:46.086 align:middle
Digamos private bool $isDebug, y aquí
abajo, úsalo: si $this->isDebug, caché

00:01:46.136 --> 00:01:49.456 align:middle
durante 5 segundos, si no,
caché durante 60 segundos.

00:01:50.216 --> 00:01:52.756 align:middle
Pero... hay una pequeña complicación...

00:01:52.906 --> 00:01:55.736 align:middle
y seguro que ya sabes cuál es.

00:01:56.406 --> 00:01:57.836 align:middle
Cuando refrescamos la página...

00:01:58.346 --> 00:02:01.926 align:middle
¡vaya! Obtenemos un error
de Cannot resolve argument.

00:02:02.576 --> 00:02:07.516 align:middle
Si saltas un poco, dice No se puede autoconectar
el servicio App\Service\MixRepository: el

00:02:07.656 --> 00:02:11.986 align:middle
argumento $isDebug del método
__construct() es de tipo bool,

00:02:12.216 --> 00:02:15.416 align:middle
debes configurar su valor explícitamente.

00:02:16.116 --> 00:02:17.496 align:middle
Esto tiene sentido.

00:02:18.006 --> 00:02:21.056 align:middle
El autocableado sólo
funciona para los servicios.

00:02:21.526 --> 00:02:28.656 align:middle
No puedes tener un argumento bool $isDebug y
esperar que Symfony se dé cuenta de alguna manera

00:02:28.656 --> 00:02:31.356 align:middle
de que queremos el parámetro kernel.debug.

00:02:32.256 --> 00:02:35.526 align:middle
Puede que sea un mago, pero
no tengo un hechizo para eso.

00:02:36.126 --> 00:02:39.086 align:middle
Sin embargo, puedo hacer desaparecer
un trozo de pastel entero.

00:02:39.476 --> 00:02:40.256 align:middle
Con magia.

00:02:40.666 --> 00:02:41.186 align:middle
Sin duda.

00:02:41.976 --> 00:02:43.206 align:middle
¿Cómo lo arreglamos?

00:02:43.756 --> 00:02:48.356 align:middle
Abre un archivo que aún no hayamos
mirado: config/services.yaml.

00:02:49.246 --> 00:02:55.106 align:middle
Hasta ahora, no hemos necesitado añadir ninguna
configuración para nuestro servicio MixRepository.

00:02:55.746 --> 00:03:00.476 align:middle
El contenedor vio la clase
MixRepository en cuanto la creamos...

00:03:00.476 --> 00:03:05.426 align:middle
y el autocableado ayudó al contenedor a saber
qué argumentos debía pasar al constructor.

00:03:06.186 --> 00:03:11.786 align:middle
Pero ahora que tenemos un argumento no autocable,
tenemos que dar una pista al contenedor.

00:03:12.166 --> 00:03:14.456 align:middle
Y eso lo hacemos en este archivo.

00:03:15.106 --> 00:03:17.836 align:middle
Dirígete a la parte inferior y
añade el espacio de nombres completo

00:03:17.836 --> 00:03:22.386 align:middle
de esta clase: App\Service\MixRepository.

00:03:23.006 --> 00:03:25.856 align:middle
Debajo de eso, utiliza la palabra bind.

00:03:26.346 --> 00:03:32.236 align:middle
Y debajo de eso, dale al contenedor una pista
para indicarle qué debe pasar al argumento

00:03:32.456 --> 00:03:42.146 align:middle
diciendo $isDebug ajustado a %kernel.debug%
Estoy usando $isDebug a propósito.

00:03:42.576 --> 00:03:47.006 align:middle
Eso tiene que coincidir exactamente con
el nombre del argumento en la clase.

00:03:47.646 --> 00:03:52.246 align:middle
Gracias a esto, el contenedor pasará
el valor del parámetro kernel.debug.

00:03:52.886 --> 00:03:54.206 align:middle
Y cuando lo probamos...

00:03:55.026 --> 00:04:00.026 align:middle
¡funciona! Los dos argumentos del
servicio siguen estando autocableados,

00:04:00.496 --> 00:04:06.086 align:middle
pero hemos rellenado el único argumento que faltaba
para que el contenedor pueda instanciar nuestro servicio.

00:04:06.446 --> 00:04:13.456 align:middle
¡Muy bien! Quiero hablar más del propósito de este
archivo y de toda la configuración aquí arriba. Resulta

00:04:14.016 --> 00:04:18.716 align:middle
que mucha de la magia que hemos estado
viendo relacionada con los servicios

00:04:18.716 --> 00:04:22.696 align:middle
y el autocableado se puede
explicar con este código.

00:04:23.176 --> 00:04:24.186 align:middle
Eso a continuación
