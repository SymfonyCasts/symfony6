WEBVTT

00:00:01.016 --> 00:00:02.576 align:middle
Vale, he mentido.

00:00:02.916 --> 00:00:06.686 align:middle
Antes de hablar de los entornos,
tengo que confesar algo:

00:00:07.136 --> 00:00:12.016 align:middle
No te he mostrado todos
los servicios de Symfony.

00:00:12.286 --> 00:00:13.926 align:middle
Ni de lejos.

00:00:14.716 --> 00:00:17.496 align:middle
Dirígete a tu terminal y
ejecuta nuestro comando favorito:

00:00:17.496 --> 00:00:23.686 align:middle
php bin/console debug:autowiring Sabemos
que todos estos servicios están flotando

00:00:23.686 --> 00:00:27.186 align:middle
en Symfony, esperando a que los pidamos.

00:00:27.796 --> 00:00:30.546 align:middle
Y sabemos que los bundles nos dan servicios.

00:00:30.936 --> 00:00:33.846 align:middle
El servicio Twig de aquí
abajo proviene de TwigBundle.

00:00:34.446 --> 00:00:37.336 align:middle
Y como cada servicio es un objeto,

00:00:37.736 --> 00:00:43.666 align:middle
algo en algún lugar debe ser
responsable de instanciar estos objetos.

00:00:44.246 --> 00:00:46.406 align:middle
La pregunta es: "¿Quién?"

00:00:46.926 --> 00:00:48.456 align:middle
Y la respuesta es...

00:00:48.776 --> 00:00:50.216 align:middle
¡el contenedor de servicios!

00:00:50.986 --> 00:00:53.826 align:middle
Resulta que todos los servicios
no están realmente...

00:00:53.976 --> 00:00:58.746 align:middle
"flotando": todos viven dentro
de algo llamado "contenedor".

00:00:59.336 --> 00:01:05.936 align:middle
Y hay muchos más servicios en el contenedor
de los que nos ha contado debug:autowiring.

00:01:06.366 --> 00:01:07.816 align:middle
Ooh... ¡secretos!

00:01:08.646 --> 00:01:13.486 align:middle
Esta vez, ejecuta: php
bin/console debug:container Y...

00:01:13.746 --> 00:01:17.246 align:middle
esto imprime una lista enorme.

00:01:17.756 --> 00:01:20.446 align:middle
Es tan grande que es difícil ver todo.

00:01:20.946 --> 00:01:22.496 align:middle
Déjame hacer la fuente más pequeña.

00:01:23.086 --> 00:01:23.616 align:middle
¡Mucho mejor!

00:01:24.376 --> 00:01:28.266 align:middle
Esta es la lista completa de todos los
servicios de nuestra aplicación...

00:01:28.586 --> 00:01:30.416 align:middle
o en el "contenedor".

00:01:31.046 --> 00:01:37.516 align:middle
El contenedor es básicamente un "array" gigante
donde cada servicio tiene un nombre único

00:01:37.906 --> 00:01:40.256 align:middle
que apunta a su objeto de servicio.

00:01:40.906 --> 00:01:42.506 align:middle
Por ejemplo, aquí abajo...

00:01:43.616 --> 00:01:44.206 align:middle
ahí vamos...

00:01:44.706 --> 00:01:49.956 align:middle
podemos ver que hay un servicio
cuyo nombre único -o "id"- es twig.

00:01:50.636 --> 00:01:56.736 align:middle
Saber que el id del servicio Twig
es twig no suele ser importante,

00:01:57.216 --> 00:02:02.326 align:middle
pero es útil entender que cada
servicio tiene un id único...

00:02:02.936 --> 00:02:06.966 align:middle
y que puedes verlos todos dentro
del comando debug:container.

00:02:07.616 --> 00:02:14.896 align:middle
Y, en realidad, el contenedor podría describirse
mejor como un gran conjunto de instrucciones

00:02:15.016 --> 00:02:20.626 align:middle
sobre cómo instanciar servicios,
siempre y cuando algo los pida.

00:02:21.376 --> 00:02:27.046 align:middle
Por ejemplo, el contenedor sabe exactamente
cómo instanciar este servicio Twig.

00:02:27.646 --> 00:02:30.816 align:middle
Sabe que su clase es Twig\Environment.

00:02:31.246 --> 00:02:34.056 align:middle
Y aunque no lo veas en esta lista,

00:02:34.546 --> 00:02:38.626 align:middle
conoce los argumentos exactos
que debe pasar a su constructor.

00:02:39.316 --> 00:02:45.246 align:middle
En el momento en que alguien necesite el servicio
Twig, el contenedor lo instanciará y lo devolverá.

00:02:45.956 --> 00:02:50.816 align:middle
Sí, cuando autocontratamos un servicio,
básicamente estamos diciendo Oye, contenedor,

00:02:51.116 --> 00:02:54.466 align:middle
¿puedes darme el servicio Cliente HTTP?

00:02:55.076 --> 00:02:58.176 align:middle
Si nada en nuestro código
ha pedido aún ese servicio

00:02:58.176 --> 00:03:02.136 align:middle
durante esta petición ,
el contenedor lo creará.

00:03:02.716 --> 00:03:05.406 align:middle
Pero si algo ya lo ha pedido,

00:03:05.786 --> 00:03:10.896 align:middle
entonces el contenedor simplemente
devolverá el que ya ha creado.

00:03:11.576 --> 00:03:17.446 align:middle
Esto significa que si pedimos el servicio
Cliente HTTP en diez lugares diferentes,

00:03:17.846 --> 00:03:23.076 align:middle
el contenedor sólo creará y
devolverá la misma instancia.

00:03:23.406 --> 00:03:24.026 align:middle
¡Bastante bien! De

00:03:24.616 --> 00:03:28.616 align:middle
todos modos, debug:container
nos muestra todos los servicios

00:03:28.676 --> 00:03:30.926 align:middle
que el contenedor sabe instanciar.

00:03:31.676 --> 00:03:37.546 align:middle
Pero debug:autowiring sólo nos
muestra una parte de esos servicios.

00:03:38.076 --> 00:03:44.086 align:middle
¿Por qué? Bueno, resulta que no todos
los servicios son autoconvocables.

00:03:44.746 --> 00:03:49.656 align:middle
Muchos de los elementos de esta lista son
servicios de bajo nivel que sólo existen

00:03:49.656 --> 00:03:52.566 align:middle
para ayudar a otros
servicios a hacer su trabajo.

00:03:53.206 --> 00:03:56.746 align:middle
Probablemente nunca necesitarás utilizar
estos servicios de bajo nivel directamente...

00:03:57.186 --> 00:04:01.456 align:middle
y, de hecho, no puedes obtenerlos
mediante autoconexión.

00:04:02.316 --> 00:04:04.236 align:middle
Pero, retrocedamos un minuto.

00:04:04.776 --> 00:04:11.526 align:middle
Ahora que sabemos un poco más, podemos saber exactamente
cómo funciona el sistema de autoconexión de Symfony.

00:04:11.876 --> 00:04:13.386 align:middle
Es maravillosamente sencillo. Como hemos

00:04:14.186 --> 00:04:19.866 align:middle
visto, el contenedor es realmente un
array donde cada servicio tiene un id

00:04:20.376 --> 00:04:22.516 align:middle
que apunta a ese objeto servicio.

00:04:23.336 --> 00:04:29.236 align:middle
Cuando Symfony ve este tipo HttpClientInterface
-este es el tipo completo que ve,

00:04:29.376 --> 00:04:35.076 align:middle
gracias a nuestra declaración use - para
averiguar qué servicio del contenedor

00:04:35.076 --> 00:04:42.646 align:middle
debe pasarnos, simplemente busca un servicio
cuyo ID coincida exactamente con esta cadena.

00:04:43.296 --> 00:04:43.936 align:middle
¡Deja que te lo enseñe!

00:04:44.546 --> 00:04:47.666 align:middle
Desplázate hacia la parte superior
de esta lista para encontrar...

00:04:48.196 --> 00:04:53.936 align:middle
¡un servicio cuyo ID es
Symfony\Contracts\HttpClient\HttpClientInterface!

00:04:54.146 --> 00:04:56.666 align:middle
La

00:04:57.306 --> 00:05:03.056 align:middle
gran mayoría de los servicios del contenedor utilizan
la estrategia de nomenclatura "caso serpiente". Pero

00:05:03.586 --> 00:05:07.996 align:middle
si un servicio está pensado para que lo
utilicemos en nuestro código, Symfony

00:05:08.486 --> 00:05:14.946 align:middle
añadirá dentro un servicio adicional que
coincida con su nombre de clase o interfaz. Gracias

00:05:15.746 --> 00:05:19.656 align:middle
a eso, cuando escribimos
HttpClientInterface, Symfony

00:05:20.086 --> 00:05:26.966 align:middle
busca en el contenedor un servicio cuyo id es
Symfony\Contracts\HttpClient\HttpClientInterface,

00:05:27.136 --> 00:05:32.446 align:middle
lo encuentra y nos lo pasa. Pero mira a la

00:05:33.116 --> 00:05:39.736 align:middle
derecha: dice que es un alias para un
ID de servicio diferente. Un "alias"

00:05:39.736 --> 00:05:43.226 align:middle
es como un enlace simbólico. Significa

00:05:43.746 --> 00:05:47.876 align:middle
que cuando alguien pregunte por el
servicio HttpClientInterface, Symfony

00:05:48.206 --> 00:05:52.046 align:middle
nos pasará en realidad
este otro servicio. Podemos

00:05:52.846 --> 00:05:56.296 align:middle
utilizar la misma lógica aquí
abajo para el tipo CacheInterface. Si

00:05:57.146 --> 00:06:02.336 align:middle
comprobamos la lista, aquí está el servicio
cuyo id coincide con ese tipo. Pero, en

00:06:02.816 --> 00:06:07.676 align:middle
realidad, es sólo un alias de un servicio
llamado cache.app. Así que cuando

00:06:09.036 --> 00:06:11.576 align:middle
autoconectamos CacheInterface,
el servicio cache.app

00:06:11.886 --> 00:06:16.456 align:middle
es lo que realmente se nos pasa. Si te

00:06:17.246 --> 00:06:21.316 align:middle
sientes inseguro, aquí tienes las
tres grandes conclusiones. Uno:

00:06:21.976 --> 00:06:25.916 align:middle
hay un montón de objetos de
servicio flotando por ahí y

00:06:26.296 --> 00:06:29.386 align:middle
todos viven dentro de algo llamado
"contenedor". Cada servicio

00:06:29.946 --> 00:06:32.556 align:middle
tiene un identificador único. Dos: sólo

00:06:33.486 --> 00:06:37.686 align:middle
un pequeño porcentaje de ellos nos son
útiles... y esos están configurados para que

00:06:38.086 --> 00:06:41.786 align:middle
podamos autocablearlos.
El autocableado funciona

00:06:42.356 --> 00:06:48.496 align:middle
buscando en el contenedor un servicio cuyo
id coincida exactamente con el tipo. Cuando

00:06:49.306 --> 00:06:53.796 align:middle
ejecutamos debug:autowiring, básicamente nos
muestra los servicios de esta lista cuyo id

00:06:53.796 --> 00:06:58.316 align:middle
es un nombre de clase o interfaz. Ésos son

00:06:58.836 --> 00:07:01.326 align:middle
los "servicios autoconducibles". La tercera

00:07:02.216 --> 00:07:07.686 align:middle
y última conclusión es que los servicios
también tienen un sistema de alias... lo que

00:07:08.146 --> 00:07:12.136 align:middle
significa que cuando pedimos el
servicio CacheInterface, lo que

00:07:12.576 --> 00:07:18.436 align:middle
realmente nos dará es el
servicio cuyo id es cache.app. Si

00:07:19.246 --> 00:07:24.416 align:middle
te preguntas cómo podríamos utilizar
un servicio no autoconectable en nuestro

00:07:24.416 --> 00:07:26.886 align:middle
código, ¡es una gran pregunta! Es algo

00:07:27.476 --> 00:07:31.626 align:middle
raro, pero aprenderemos a hacerlo más
adelante. A continuación, vamos a

00:07:32.516 --> 00:07:37.486 align:middle
hablar de la utilización de una configuración diferente
a nivel local y a nivel de producción. Hablemos

00:07:37.946 --> 00:07:40.236 align:middle
de los entornos
