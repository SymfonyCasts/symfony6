WEBVTT

00:00:01.016 --> 00:00:03.386 align:middle
Abre src/Controller/VinylController.php.

00:00:03.386 --> 00:00:12.196 align:middle
Puede que sea obvio o no, pero nuestras clases de
controlador también son servicios en el contenedor

00:00:12.926 --> 00:00:17.036 align:middle
¡Sí! Parecen especiales
porque son controladores...

00:00:17.446 --> 00:00:22.016 align:middle
pero en realidad no son más que viejos y
aburridos servicios, como todo lo demás.

00:00:22.516 --> 00:00:27.256 align:middle
Bueno, excepto que tienen un
superpoder que nada más tiene

00:00:27.576 --> 00:00:32.366 align:middle
la capacidad de autoconectar
argumentos en sus métodos de acción.

00:00:33.016 --> 00:00:36.116 align:middle
Normalmente, el autocableado
sólo funciona con el constructor.

00:00:36.746 --> 00:00:43.226 align:middle
Y los métodos de acción funcionan realmente igual que
los constructores en lo que respecta a la autoconexión.

00:00:43.946 --> 00:00:48.656 align:middle
Por ejemplo, añade un argumento bool
$isDebug a la acción browse()...

00:00:49.306 --> 00:00:51.416 align:middle
y a continuación dump($isDebug):

00:00:52.396 --> 00:00:53.456 align:middle
Y eso...

00:00:54.246 --> 00:00:55.496 align:middle
¡no funciona! Hasta

00:00:56.006 --> 00:01:01.316 align:middle
ahora, las únicas dos cosas que sabemos que
podemos tener como argumentos de nuestras

00:01:01.446 --> 00:01:06.216 align:middle
"acciones" son (A), cualquier
comodín en la ruta como $slug

00:01:06.866 --> 00:01:11.686 align:middle
y (B) los servicios
autocableables, como MixRepository.

00:01:12.516 --> 00:01:19.356 align:middle
Pero ahora, vuelve a config/services.yaml
y descomenta el global bind de antes:

00:01:20.276 --> 00:01:20.856 align:middle
Esta vez...

00:01:21.976 --> 00:01:27.856 align:middle
¡funciona! Yendo en la otra dirección,
como los controladores son servicios,

00:01:28.286 --> 00:01:31.886 align:middle
puedes tener absolutamente
un constructor si quieres.

00:01:32.646 --> 00:01:37.056 align:middle
Movamos MixRepository y
$isDebug a un nuevo constructor.

00:01:37.716 --> 00:01:39.336 align:middle
Cópialos, quítalos...

00:01:41.836 --> 00:01:45.856 align:middle
añade public function __construct(), pega...

00:01:46.406 --> 00:01:48.616 align:middle
y los pondré en sus propias líneas.

00:01:49.636 --> 00:01:53.266 align:middle
Para convertirlos en propiedades,
añade private delante de cada uno: De

00:01:53.266 --> 00:02:00.426 align:middle
nuevo abajo, sólo tenemos que asegurarnos
de cambiar a dump($this->isDebug)

00:02:00.736 --> 00:02:03.986 align:middle
y añadir $this-> delante de mixRepository:

00:02:04.546 --> 00:02:07.066 align:middle
¡Bien! Si probamos esto ahora...

00:02:07.876 --> 00:02:09.726 align:middle
¡funciona bien!

00:02:10.516 --> 00:02:13.126 align:middle
Normalmente no sigo este enfoque...

00:02:13.336 --> 00:02:19.516 align:middle
principalmente porque añadir argumentos
al método de la acción es muy fácil.

00:02:20.146 --> 00:02:25.096 align:middle
Pero si necesitas un servicio u otro valor
en cada método de acción de tu clase,

00:02:25.616 --> 00:02:30.776 align:middle
definitivamente puedes limpiar tu lista de
argumentos inyectándola a través del constructor.

00:02:31.476 --> 00:02:33.006 align:middle
Voy a eliminar ese dump().

00:02:33.986 --> 00:02:38.456 align:middle
A continuación, vamos a hablar de las
variables de entorno y de la finalidad

00:02:38.456 --> 00:02:41.356 align:middle
del archivo .env que hemos visto antes.

00:02:41.976 --> 00:02:48.726 align:middle
Estas cosas serán cada vez más importantes a medida
que hagamos nuestra aplicación más y más realista
