WEBVTT

00:00:01.036 --> 00:00:07.686 align:middle
Nuestra aplicación es como una máquina: es un conjunto
de servicios y clases PHP que hacen el trabajo...

00:00:08.076 --> 00:00:10.116 align:middle
y, en última instancia,
renderizan algunas páginas.

00:00:10.576 --> 00:00:15.886 align:middle
Pero podemos hacer que nuestra máquina funcione de forma
diferente alimentándola con una configuración distinta.

00:00:16.646 --> 00:00:22.116 align:middle
Por ejemplo, en SongController, estamos utilizando el
servicio $logger para registrar cierta información:

00:00:22.896 --> 00:00:29.786 align:middle
Si le damos al registrador una configuración
que diga "registrar todo", lo registrará todo,

00:00:30.016 --> 00:00:32.906 align:middle
incluidos los mensajes de
depuración de bajo nivel.

00:00:33.476 --> 00:00:39.936 align:middle
Pero si cambiamos la configuración para que diga "sólo
registrar errores", sólo registrará los errores.

00:00:40.546 --> 00:00:46.486 align:middle
En otras palabras, la misma máquina puede comportarse
de forma diferente en función de nuestra configuración.

00:00:47.116 --> 00:00:51.166 align:middle
Y a veces, como con el registro,
podemos necesitar que esa configuración

00:00:51.166 --> 00:00:55.026 align:middle
sea diferente mientras estamos
desarrollando localmente o en producción.

00:00:55.776 --> 00:01:00.656 align:middle
Para manejar esto, Symfony tiene un
concepto importante llamado "entornos".

00:01:01.096 --> 00:01:06.116 align:middle
No me refiero a entornos como local
vs staging vs beta vs producción.

00:01:06.116 --> 00:01:10.386 align:middle
Un entorno Symfony es un
conjunto de configuraciones. Por

00:01:11.046 --> 00:01:15.716 align:middle
ejemplo, puedes ejecutar tu código en el
entorno dev con un conjunto de configuraciones

00:01:15.716 --> 00:01:18.306 align:middle
diseñadas para el desarrollo.

00:01:18.936 --> 00:01:23.206 align:middle
O puedes ejecutar tu aplicación en el entorno
prod con un conjunto de configuraciones

00:01:23.206 --> 00:01:25.756 align:middle
optimizadas para producción.

00:01:26.446 --> 00:01:26.946 align:middle
Deja que te lo enseñe

00:01:26.946 --> 00:01:31.056 align:middle
En la raíz de nuestro proyecto,
tenemos un archivo .env:

00:01:31.686 --> 00:01:33.726 align:middle
Hablaremos más sobre este
archivo más adelante.

00:01:34.346 --> 00:01:36.546 align:middle
Pero, ¿ves este APP_ENV=dev?

00:01:37.206 --> 00:01:43.556 align:middle
Esto le dice a Symfony que el entorno actual es
dev, que es perfecto para el desarrollo local.

00:01:44.276 --> 00:01:48.166 align:middle
Cuando despleguemos a producción,
cambiaremos esto a prod.

00:01:48.646 --> 00:01:50.366 align:middle
Más sobre esto en unos minutos.

00:01:51.116 --> 00:01:53.626 align:middle
Pero... ¿qué diferencia hay?

00:01:54.076 --> 00:01:58.256 align:middle
¿Qué ocurre en nuestra aplicación
cuando cambiamos esto de dev a prod?

00:01:59.036 --> 00:02:01.936 align:middle
Para responder, déjame
cerrar algunas carpetas...

00:02:03.806 --> 00:02:07.176 align:middle
y abrir public/index.php:

00:02:07.176 --> 00:02:09.986 align:middle
Recuerda: éste es nuestro controlador frontal.

00:02:10.556 --> 00:02:14.386 align:middle
Es el primer archivo que se
ejecuta en cada petición.

00:02:14.946 --> 00:02:21.216 align:middle
En realidad no nos importa mucho este archivo,
pero su función es importante: arranca Symfony.

00:02:21.976 --> 00:02:28.376 align:middle
Lo interesante es que lee
el valor APP_ENV y lo pasa

00:02:28.376 --> 00:02:31.446 align:middle
como primer argumento a esta clase Kernel.

00:02:32.076 --> 00:02:36.056 align:middle
Y... ¡esta clase Kernel está
realmente en nuestro código!

00:02:36.566 --> 00:02:38.916 align:middle
Vive en src/Kernel.php.

00:02:39.906 --> 00:02:46.376 align:middle
Genial. Así que lo que quiero saber ahora es
¿Qué controla el primer argumento de Kernel?

00:02:47.236 --> 00:02:49.616 align:middle
Si abrimos la clase encontramos...

00:02:50.256 --> 00:02:52.146 align:middle
absolutamente nada.

00:02:52.386 --> 00:02:52.986 align:middle
Está vacía.

00:02:53.516 --> 00:02:57.296 align:middle
Eso es porque la mayor parte de
la lógica vive en este rasgo.

00:02:57.976 --> 00:03:02.096 align:middle
Mantén pulsada la tecla "cmd" o "control"
y haz clic en MicroKernelTrait para abrirlo.

00:03:02.976 --> 00:03:07.386 align:middle
La función de Kernel es cargar todos los
servicios y rutas de nuestra aplicación.

00:03:08.226 --> 00:03:13.516 align:middle
Si te desplazas hacia abajo, tiene un
método llamado configureContainer().

00:03:13.516 --> 00:03:17.186 align:middle
¡Ya sabemos qué es el contenedor!

00:03:17.846 --> 00:03:18.966 align:middle
¡Y mira lo que hace!

00:03:18.966 --> 00:03:25.206 align:middle
Toma este objeto $container e importa
$configDir.'/{packages}/*.{php,yaml}'.

00:03:25.206 --> 00:03:26.256 align:middle
Esta

00:03:27.116 --> 00:03:29.196 align:middle
línea dice ¡Eh, contenedor!

00:03:29.196 --> 00:03:33.756 align:middle
Quiero cargar todos los archivos
del directorio config/packages/.

00:03:34.486 --> 00:03:39.656 align:middle
Carga todos esos archivos y luego pasa
la configuración de cada uno de ellos al

00:03:39.996 --> 00:03:42.986 align:middle
bundle definido como clave raíz. Pero

00:03:43.686 --> 00:03:48.586 align:middle
lo realmente interesante para los
entornos es esta línea siguiente import

00:03:49.106 --> 00:03:51.346 align:middle
$configDir.'/{packages}/'.$this->environment.'/*.{php,yaml}'.
¡ Si

00:03:51.346 --> 00:03:54.466 align:middle
escarbaras

00:03:54.466 --> 00:03:55.316 align:middle
un poco,

00:03:55.996 --> 00:04:00.976 align:middle
aprenderías que $this->environment
es igual al primer argumento que se

00:04:00.976 --> 00:04:03.946 align:middle
pasa a Kernel! En otras palabras, en el entorno

00:04:04.606 --> 00:04:07.806 align:middle
dev, será dev. Así, además de los

00:04:08.486 --> 00:04:13.776 align:middle
archivos de configuración principales, también cargará
todo lo que haya en el directorio config/packages/dev/.

00:04:13.776 --> 00:04:17.506 align:middle
Sí, podemos añadir

00:04:18.346 --> 00:04:20.586 align:middle
allí una configuración extra que anule la

00:04:21.046 --> 00:04:25.286 align:middle
configuración principal del
entorno dev. Por ejemplo, podemos

00:04:26.046 --> 00:04:31.646 align:middle
añadir una configuración de registro que le diga al
registrador que lo registre todo Debajo de esto, también

00:04:32.546 --> 00:04:36.766 align:middle
cargamos un archivo llamado
services.yaml y, si lo tenemos,

00:04:37.056 --> 00:04:40.426 align:middle
services_dev.yaml. Hablaremos más sobre

00:04:40.946 --> 00:04:43.556 align:middle
services.yaml muy pronto. Así que, si quieres

00:04:44.446 --> 00:04:48.106 align:middle
añadir una configuración específica
del entorno, puedes poner la

00:04:48.356 --> 00:04:51.416 align:middle
en el directorio de entorno
correcto. Pero hay otra

00:04:52.316 --> 00:04:53.626 align:middle
forma. Es una característica bastante nueva

00:04:54.076 --> 00:04:58.316 align:middle
y la vimos al final de
twig.yaml. Es la sintaxis when@:

00:04:58.866 --> 00:05:01.506 align:middle
En Symfony, por defecto,

00:05:02.316 --> 00:05:07.616 align:middle
hay tres entornos: dev prod , y luego, si

00:05:07.616 --> 00:05:12.996 align:middle
ejecutas pruebas automatizadas, hay un
entorno llamado test. Dentro de twig.yaml, al

00:05:13.846 --> 00:05:17.156 align:middle
decir, when@test, significa que esta

00:05:17.656 --> 00:05:23.826 align:middle
configuración sólo se cargará si el
entorno es igual a test. El mejor ejemplo de

00:05:24.546 --> 00:05:28.026 align:middle
esto podría estar en
monolog.yaml. monolog es el bundle

00:05:28.616 --> 00:05:31.656 align:middle
que controla el servicio de logger.
Tiene una configuración que se

00:05:32.186 --> 00:05:36.696 align:middle
utiliza en todos los entornos.
Pero, por debajo de éste, tiene

00:05:37.156 --> 00:05:40.406 align:middle
when@dev. No hablaremos

00:05:41.386 --> 00:05:45.276 align:middle
demasiado de la configuración específica
de monolog, pero esto controla cómo

00:05:45.686 --> 00:05:49.256 align:middle
se gestionan los mensajes de
registro. En el entorno dev,

00:05:50.096 --> 00:05:56.426 align:middle
esto dice que se debe registrar todo y que se debe registrar en
un archivo, utilizando esta elegante sintaxis %kernel.logs_dir%

00:05:56.846 --> 00:06:02.756 align:middle
de la que aprenderemos pronto.
En cualquier caso, esto apunta a

00:06:03.616 --> 00:06:10.426 align:middle
un archivo var/logs/dev.log y la parte
level: debug significa que registrará

00:06:10.426 --> 00:06:16.486 align:middle
cada mensaje en dev.log...
independientemente de lo importante

00:06:16.946 --> 00:06:22.056 align:middle
o no que sea ese mensaje.
Debajo de esto, para el

00:06:22.976 --> 00:06:27.166 align:middle
entornoprod, es bastante diferente.
La línea más importante

00:06:27.706 --> 00:06:31.156 align:middle
es action_level: error. Que dice: ¡Hola Sra.

00:06:31.746 --> 00:06:33.686 align:middle
Logger! Esta aplicación probablemente registra

00:06:34.016 --> 00:06:41.486 align:middle
una tonelada de mensajes, pero sólo quiero que guardes realmente
los mensajes que tengan un nivel de importancia de error

00:06:41.746 --> 00:06:45.126 align:middle
o superior. ¡Eso tiene sentido! En

00:06:45.876 --> 00:06:46.706 align:middle
producción, no

00:06:47.046 --> 00:06:53.416 align:middle
queremos que nuestros archivos de registro se llenen de
toneladas y toneladas de mensajes de depuración. Con esto, sólo

00:06:53.886 --> 00:06:56.646 align:middle
registramos los mensajes
de error. Lo importante es

00:06:57.276 --> 00:07:00.636 align:middle
lo siguiente: utilizando estos
trucos, podemos configurar nuestros

00:07:00.746 --> 00:07:05.486 align:middle
servicios de forma diferente en función
del entorno. ¡ E incluso podemos hacer

00:07:06.146 --> 00:07:09.056 align:middle
lo mismo con las rutas! A
veces tienes rutas enteras

00:07:09.606 --> 00:07:14.936 align:middle
que sólo quieres cargar en un entorno
determinado. Volviendo a MicroKernelTrait, si

00:07:15.736 --> 00:07:21.516 align:middle
bajas, hay un método llamado
configureRoutes(). Éste es el responsable

00:07:22.106 --> 00:07:26.106 align:middle
de cargar todas nuestras
rutas... y es muy similar

00:07:26.546 --> 00:07:28.996 align:middle
al otro código. Carga
$configDir.'/{routes}/*.{php,yaml}'

00:07:29.546 --> 00:07:32.406 align:middle
así como este

00:07:32.406 --> 00:07:37.226 align:middle
directorio de entornodev, si tienes uno.
Nosotros no lo tenemos. También puedes

00:07:37.606 --> 00:07:42.056 align:middle
utilizar el truco when@dev.
Este archivo se encarga de

00:07:42.676 --> 00:07:47.716 align:middle
registrar las rutas que utiliza la barra de herramientas de depuración
web. No queremos la barra de herramientas de depuración web

00:07:48.406 --> 00:07:51.956 align:middle
en producción... así que estas rutas sólo se

00:07:52.316 --> 00:07:56.586 align:middle
importan en el entorno dev. Diablos,
¡ciertos bundles sólo están

00:07:57.176 --> 00:08:00.876 align:middle
habilitados en algunos entornos!
Si abres config/bundles.php,

00:08:01.646 --> 00:08:05.956 align:middle
tenemos el nombre del bundle...
y luego, a la derecha,

00:08:06.406 --> 00:08:11.836 align:middle
los entornos en los que ese bundle debe estar
habilitado. Este all significa todos los entornos....

00:08:12.716 --> 00:08:15.126 align:middle
y la mayoría están habilitados en

00:08:15.446 --> 00:08:18.326 align:middle
todos los entornos. Sin embargo,
el WebProfilerBundle -el

00:08:19.076 --> 00:08:25.356 align:middle
bundle que nos proporciona la barra de herramientas de
depuración web y el perfilador- sólo se carga en los entornos

00:08:25.936 --> 00:08:29.476 align:middle
dev y test. Sí, todo el bundle

00:08:30.246 --> 00:08:34.556 align:middle
-y los servicios que proporciona-
nunca se cargan en el entorno

00:08:34.866 --> 00:08:37.666 align:middle
prod. Así que, ahora que entendemos

00:08:38.426 --> 00:08:41.726 align:middle
lo básico de los entornos, veamos si podemos

00:08:42.076 --> 00:08:46.156 align:middle
cambiar nuestra aplicación al
entorno prod. Y luego, como reto,

00:08:46.806 --> 00:08:52.836 align:middle
configuraremos nuestro servicio de caché de
forma diferente en dev.

00:08:53.336 --> 00:08:54.276 align:middle
Eso a continuación.