WEBVTT

00:00:01.006 --> 00:00:04.146 align:middle
Ejecuta: php bin/console debug:container Y...

00:00:04.146 --> 00:00:08.316 align:middle
Haré esto un poco más pequeño para
que todo aparezca en una sola línea.

00:00:09.146 --> 00:00:14.426 align:middle
Como sabemos, este comando muestra todos
los servicios de nuestro contenedor...

00:00:14.776 --> 00:00:18.966 align:middle
pero sólo un pequeño número
de ellos son autoconectables.

00:00:19.776 --> 00:00:25.176 align:middle
Lo sabemos porque un servicio es
autoconectable sólo si su ID,

00:00:25.376 --> 00:00:29.576 align:middle
que es esto de aquí, es un
nombre de clase o de interfaz.

00:00:29.576 --> 00:00:35.466 align:middle
Así que, al principio, podría parecer
que el servicio Twig no es autoconectable.

00:00:35.466 --> 00:00:42.226 align:middle
Después de todo, su ID - twig - no
es en absoluto una clase o interfaz.

00:00:42.946 --> 00:00:45.406 align:middle
Pero si te desplazas hasta la parte superior...

00:00:45.836 --> 00:00:46.716 align:middle
veamos...

00:00:47.246 --> 00:00:53.176 align:middle
¡sí! Hay otro servicio en el
contenedor cuyo ID es Twig\Environment,

00:00:53.376 --> 00:00:56.136 align:middle
que es un alias del servicio twig.

00:00:56.806 --> 00:01:00.956 align:middle
Este es un pequeño truco que hace Symfony para
hacer que los servicios sean autoconducibles.

00:01:01.696 --> 00:01:07.056 align:middle
Si escribimos un argumento con
Twig\Environment, obtendremos el servicio twig.

00:01:07.816 --> 00:01:13.836 align:middle
Sin embargo, la mayoría de los servicios
de esta lista no tienen un alias como ese.

00:01:13.836 --> 00:01:16.336 align:middle
Por tanto, no son autoconectables.

00:01:16.936 --> 00:01:19.026 align:middle
Y, por lo general, eso está bien.

00:01:19.706 --> 00:01:25.906 align:middle
Si un servicio no es autoconectable, probablemente
sea porque nunca necesitarás utilizarlo.

00:01:26.586 --> 00:01:31.096 align:middle
Pero supongamos que sí
queremos utilizar uno de ellos.

00:01:31.746 --> 00:01:32.476 align:middle
Fíjate en éste

00:01:32.746 --> 00:01:35.586 align:middle
Se llama twig.command.debug.

00:01:36.446 --> 00:01:37.526 align:middle
Abre otra pestaña.

00:01:38.306 --> 00:01:43.786 align:middle
Antes hemos ejecutado: php bin/console
debug:twig Esto nos muestra todas las

00:01:43.786 --> 00:01:45.706 align:middle
funciones y filtros de Twig...

00:01:45.946 --> 00:01:47.126 align:middle
¡lo que está muy bien!

00:01:47.876 --> 00:01:49.356 align:middle
Bueno, ¡sorpresa!

00:01:49.606 --> 00:01:54.316 align:middle
¡Este comando proviene del
servicio twig.command.debug!

00:01:54.876 --> 00:02:00.816 align:middle
Porque "todo en Symfony lo hace un servicio",
incluso los comandos de la consola.

00:02:01.606 --> 00:02:05.226 align:middle
Como reto, vamos a ver si
podemos inyectar este servicio

00:02:05.226 --> 00:02:09.836 align:middle
en MixRepository, ejecutarlo
y volcar su salida.

00:02:09.836 --> 00:02:11.436 align:middle
Lo primero es lo primero.

00:02:11.756 --> 00:02:16.836 align:middle
En MixRepository, acabamos de descubrir
que, para hacer nuestro trabajo,

00:02:17.046 --> 00:02:19.596 align:middle
necesitamos acceder a otro servicio.

00:02:20.106 --> 00:02:20.926 align:middle
¿Qué hacemos?

00:02:21.476 --> 00:02:28.906 align:middle
La respuesta: Inyección de dependencia, que es esa elegante
palabra para añadir otro argumento de construcción

00:02:29.346 --> 00:02:36.106 align:middle
y fijarlo en una propiedad, lo que podemos
hacer de una vez con private $twigDebugCommand:

00:02:36.976 --> 00:02:39.236 align:middle
Si nos detenemos ahora mismo y refrescamos...

00:02:39.616 --> 00:02:40.406 align:middle
¡no te sorprendas!

00:02:40.706 --> 00:02:41.896 align:middle
Obtendríamos un error.

00:02:41.896 --> 00:02:45.976 align:middle
Symfony no tiene ni idea de
qué pasar para ese argumento.

00:02:46.816 --> 00:02:49.396 align:middle
¿Y si añadimos el tipo de esta clase?

00:02:50.046 --> 00:02:56.336 align:middle
De vuelta a nuestro terminal, podemos ver que
este servicio es una instancia de DebugCommand.

00:02:57.116 --> 00:03:00.606 align:middle
Por aquí, vamos a añadir ese
tipo -pista: DebugCommand...

00:03:01.276 --> 00:03:04.276 align:middle
queremos el de Symfony\Bridge\Twig\Command.

00:03:04.916 --> 00:03:06.536 align:middle
Pulsa "tab" para autocompletarlo:

00:03:07.176 --> 00:03:07.926 align:middle
Y luego...

00:03:08.216 --> 00:03:10.796 align:middle
actualiza. ¡Sigue habiendo un error!

00:03:11.316 --> 00:03:16.026 align:middle
Vale, deberíamos añadir la sugerencia
de tipo porque somos buenos programadores.

00:03:16.526 --> 00:03:22.266 align:middle
Pero... por mucho que lo intentemos,
esto no es un servicio autocompletable.

00:03:22.266 --> 00:03:25.036 align:middle
Entonces, ¿cómo lo arreglamos?

00:03:25.706 --> 00:03:27.466 align:middle
Hay dos formas principales.

00:03:27.756 --> 00:03:32.706 align:middle
Primero te mostraré la forma antigua,
que hago principalmente porque la verás

00:03:32.706 --> 00:03:36.386 align:middle
en la documentación y en las
entradas del blog por todas partes.

00:03:37.176 --> 00:03:41.306 align:middle
En config/services.yaml,
al igual que hicimos antes

00:03:41.306 --> 00:03:45.886 align:middle
para el argumento $isDebug, anula
nuestro servicio por completo.

00:03:45.886 --> 00:03:51.306 align:middle
Digamos App\Service\MixRepository,
y añadimos una clave bind.

00:03:52.106 --> 00:03:56.906 align:middle
Entonces, vamos a insinuar lo que hay que
pasar al argume nto $twigDebugCommand.

00:03:57.536 --> 00:04:01.266 align:middle
Lo único complicado es averiguar
qué valor hay que poner.

00:04:01.266 --> 00:04:09.506 align:middle
Por ejemplo, si voy y copio el ID del servicio
- twig.command.debug - y lo pego aquí...

00:04:09.976 --> 00:04:11.406 align:middle
¡eso no va a funcionar!

00:04:11.846 --> 00:04:14.826 align:middle
Eso va a pasar literalmente por esa cadena.

00:04:15.576 --> 00:04:17.776 align:middle
Si refrescas, ¡sí!

00:04:18.146 --> 00:04:22.196 align:middle
El argumento 4 debe ser del
tipo DebugCommand, cadena dada.

00:04:22.916 --> 00:04:27.136 align:middle
Tenemos que decirle a Symfony que
pase el servicio que tiene este ID.

00:04:27.996 --> 00:04:32.606 align:middle
En estos archivos YAML, hay una sintaxis
especial para hacer precisamente eso

00:04:33.096 --> 00:04:36.656 align:middle
prefijar el ID del servicio con el símbolo @:

00:04:37.356 --> 00:04:38.876 align:middle
En cuanto hagamos eso...

00:04:39.306 --> 00:04:43.456 align:middle
¡el hecho de que esto no explote
significa que está funcionando!

00:04:44.216 --> 00:04:46.426 align:middle
Pero... vamos a eliminar esto.

00:04:46.786 --> 00:04:49.796 align:middle
Porque quiero mostrarte la
nueva forma de hacer esto...

00:04:50.076 --> 00:04:54.116 align:middle
que aprovecha ese mismo
atributo de lujo Autowire.

00:04:54.956 --> 00:05:00.196 align:middle
Aquí arriba, digamos #[Autowire()],
pero en lugar de pasar sólo una cadena,

00:05:00.356 --> 00:05:04.526 align:middle
digamos service: 'twig.command.debug':

00:05:05.206 --> 00:05:06.536 align:middle
¡Me encanta!

00:05:07.176 --> 00:05:10.436 align:middle
Antes de probarlo, vamos
a utilizar el servicio.

00:05:10.806 --> 00:05:12.066 align:middle
Dirígete a findAll().

00:05:12.986 --> 00:05:18.556 align:middle
Ejecutar un comando de consola manualmente
en tu código PHP es totalmente posible.

00:05:18.556 --> 00:05:20.876 align:middle
Es un poco raro, ¡pero genial!

00:05:21.616 --> 00:05:25.676 align:middle
Tenemos que crear un objeto
$output = new BufferedOutput()...

00:05:26.376 --> 00:05:34.076 align:middle
luego podemos ejecutar el comando diciendo
$this->twigDebugCommand->run(new ArrayInput()) -

00:05:34.576 --> 00:05:37.476 align:middle
esto es, más o menos, fingir los
argumentos de la línea de comandos -

00:05:37.646 --> 00:05:41.996 align:middle
pasarle un [] vacío - luego $output.

00:05:41.996 --> 00:05:45.096 align:middle
Lo que el comando produzca
se fijará en ese objeto.

00:05:45.776 --> 00:05:49.676 align:middle
Para ver si funciona, basta con dd($output):

00:05:49.676 --> 00:05:50.496 align:middle
¡Tiempo de prueba!

00:05:50.876 --> 00:05:51.436 align:middle
Refresca...

00:05:51.506 --> 00:05:53.396 align:middle
¡y lo tienes!

00:05:53.396 --> 00:05:54.806 align:middle
Qué divertido es esto

00:05:55.686 --> 00:06:00.406 align:middle
Muy bien, ahora que esto funciona,
vamos a comentar esta tontería.

00:06:01.906 --> 00:06:05.956 align:middle
Mantendré nuestro $twigDebugCommand
inyectado sólo como referencia.

00:06:06.846 --> 00:06:13.396 align:middle
La conclusión clave es la siguiente: la mayoría de
los argumentos a los servicios serán autoconducibles.

00:06:13.746 --> 00:06:22.076 align:middle
¡Sí! Pero cuando encuentres un argumento que no sea
autoconductible, puedes utilizar el atributo Autowire

00:06:22.376 --> 00:06:25.406 align:middle
para apuntar al valor o servicio que necesitas.

00:06:26.356 --> 00:06:28.666 align:middle
Lo siguiente: ¿Recuerdas cuando te dije

00:06:28.666 --> 00:06:33.176 align:middle
que MixRepository fue el
primer servicio que creamos?

00:06:33.716 --> 00:06:35.106 align:middle
Pues... Mentí.

00:06:35.646 --> 00:06:40.186 align:middle
¡Resulta que nuestros controladores
han sido servicios todo este tiempo!
