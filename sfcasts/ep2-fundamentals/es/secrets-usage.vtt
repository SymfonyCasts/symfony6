WEBVTT

00:00:01.016 --> 00:00:04.876 align:middle
Acabamos de crear una bóveda de
secretos para nuestro entorno dev...

00:00:05.316 --> 00:00:09.886 align:middle
que contendrá una versión "segura" por defecto
de cualquier variable de entorno sensible.

00:00:10.436 --> 00:00:14.646 align:middle
Por ejemplo, hemos establecido el
valor GITHUB_TOKEN como CHANGEME.

00:00:15.316 --> 00:00:18.096 align:middle
Ahora vamos a crear la
bóveda del entorno prod.

00:00:18.696 --> 00:00:19.546 align:middle
Hazlo diciendo: ./bin/console

00:00:19.716 --> 00:00:28.036 align:middle
secrets:set GITHUB_TOKEN --env=prod
Esta vez, coge el valor secreto real de

00:00:28.036 --> 00:00:31.116 align:middle
.env.local y pégalo aquí.

00:00:31.876 --> 00:00:37.276 align:middle
Igual que antes, como no había ya una
bóveda de prod, Symfony la ha creado. Y

00:00:37.756 --> 00:00:40.516 align:middle
tiene los mismos cuatro
archivos que antes. Aunque,

00:00:40.906 --> 00:00:44.726 align:middle
hay una sutil, pero
importante diferencia. Añade

00:00:45.506 --> 00:00:50.806 align:middle
ese nuevo directorio a git: Y luego
ejecuta: git status ¡Woh! Sólo se

00:00:51.236 --> 00:00:54.496 align:middle
han añadido tres de los cuatro archivos. El

00:00:55.086 --> 00:01:00.066 align:middle
cuarto archivo -la clave
decrypt - es ignorado por Git.

00:01:00.646 --> 00:01:03.776 align:middle
Ya tenemos una línea dentro
en .gitignore para ello.

00:01:04.316 --> 00:01:08.486 align:middle
No queremos confirmar la clave de descifrado
de prod en el repositorio... porque

00:01:08.916 --> 00:01:13.556 align:middle
cualquiera que tenga esta clave podrá
leer todos nuestros secretos. Así,

00:01:14.146 --> 00:01:19.796 align:middle
si otro desarrollador baja el proyecto ahora,
tendrá la clave de descifrado de dev, por lo que

00:01:20.126 --> 00:01:23.676 align:middle
no tendrá problemas para leer los
valores de la bóveda de dev. No tendrán

00:01:24.546 --> 00:01:26.946 align:middle
la clave de descifrado de prod... ¡pero

00:01:27.186 --> 00:01:28.416 align:middle
no pasa nada! ¡ El

00:01:28.916 --> 00:01:33.486 align:middle
único lugar donde necesitas la clave de
descifrado prod es en producción! Así que

00:01:33.956 --> 00:01:37.596 align:middle
con esta configuración, cuando
despliegues, en lugar de tener que

00:01:37.596 --> 00:01:43.916 align:middle
crear un archivo .env.local entero que contenga
todos tus secretos, sólo tendrás que preocuparte de

00:01:43.916 --> 00:01:49.886 align:middle
introducir este único archivo
prod.decrypt.private.php en tu código. O,

00:01:50.466 --> 00:01:55.976 align:middle
como alternativa, puedes leer esta clave
y establecerla en una variable de entorno:

00:01:56.386 --> 00:01:58.516 align:middle
puedes consultar la documentación
para saber cómo hacerlo. Pero...

00:01:59.356 --> 00:02:00.586 align:middle
espera un segundo. ¡

00:02:00.906 --> 00:02:04.436 align:middle
En realidad no he explicado
cómo se utiliza la bóveda!

00:02:05.146 --> 00:02:08.556 align:middle
Sabemos que el entorno dev
utilizará la bóveda dev... y

00:02:08.736 --> 00:02:10.736 align:middle
prod utilizará prod... pero

00:02:11.246 --> 00:02:14.236 align:middle
¿cómo leemos los secretos de la bóveda? La

00:02:15.046 --> 00:02:16.286 align:middle
respuesta es...

00:02:16.576 --> 00:02:18.586 align:middle
¡ya lo estamos haciendo! Los secretos

00:02:19.046 --> 00:02:22.186 align:middle
se convierten en variables de entorno. ¡ Es

00:02:22.516 --> 00:02:23.686 align:middle
tan sencillo como eso! Así que

00:02:24.416 --> 00:02:29.666 align:middle
en config/packages/framework.yaml,
utilizando esta sintaxis env, este

00:02:29.886 --> 00:02:36.366 align:middle
GITHUB_TOKEN podría ser una variable de entorno real,
o podría ser un secreto en nuestra bóveda. Para

00:02:37.216 --> 00:02:43.466 align:middle
ver si esto funciona, dirígete a MixRepository
y dd($this->githubContentClient): Muévete

00:02:44.076 --> 00:02:46.596 align:middle
, refresca y...

00:02:47.226 --> 00:02:50.096 align:middle
veamos si podemos encontrar la cabecera
de Autorización en esto. En realidad, hay

00:02:50.576 --> 00:02:53.166 align:middle
un truco muy bueno con el volcado. Haz clic

00:02:53.836 --> 00:02:59.196 align:middle
en esta zona y mantén pulsado "comando" o
"control" + "F" para buscar dentro de ella.

00:02:59.776 --> 00:03:01.816 align:middle
Busca la palabra "token" y... ¡oh,

00:03:02.416 --> 00:03:03.906 align:middle
eso no está bien! Esa es

00:03:04.286 --> 00:03:05.856 align:middle
nuestra ficha real. Pero...

00:03:06.476 --> 00:03:12.456 align:middle
ya que estamos en el entorno dev, ¿no debería
estar leyendo nuestra bóveda dev en la que

00:03:12.546 --> 00:03:15.346 align:middle
establecimos el valor falso de
CHANGEME? ¿Qué está pasando

00:03:15.846 --> 00:03:16.596 align:middle
? Como

00:03:17.476 --> 00:03:20.726 align:middle
ya he dicho, los secretos se convierten en
variables de entorno. Pero las variables de entorno

00:03:21.086 --> 00:03:25.916 align:middle
tienen prioridad sobre los secretos: incluso

00:03:26.556 --> 00:03:30.416 align:middle
las variables de entorno definidas
en los archivos .env. Sí,

00:03:31.116 --> 00:03:37.176 align:middle
porque tenemos una variable de entorno
GITHUB_TOKEN definida en .env y .env.local, ¡que

00:03:37.606 --> 00:03:41.446 align:middle
tiene prioridad sobre el valor
de la bóveda! Esta es la

00:03:42.246 --> 00:03:43.136 align:middle
cuestión. En

00:03:43.546 --> 00:03:49.006 align:middle
cuanto elijas convertir un valor de una
variable de entorno en un secreto, tienes

00:03:49.486 --> 00:03:53.886 align:middle
que dejar de establecerlo como
variable de entorno por completo. En

00:03:54.446 --> 00:03:59.916 align:middle
otras palabras, borra GITHUB_TOKEN en
.env y también en .env.local. Ve a

00:04:00.686 --> 00:04:06.196 align:middle
actualizar, haz clic de nuevo en esto,
usa "comando" + "F", busca "token", y...

00:04:06.586 --> 00:04:09.206 align:middle
¡lo tienes! ¡Vemos "CHANGEME"! Si

00:04:09.946 --> 00:04:14.526 align:middle
estuviéramos en el entorno prod, leería el
valor de la bóveda prod... suponiendo que

00:04:14.836 --> 00:04:17.656 align:middle
la clave de descifrado prod
estuviera disponible. Vale,

00:04:18.486 --> 00:04:22.526 align:middle
quita ese dd() y actualiza para
descubrir que... ¡localmente,

00:04:23.076 --> 00:04:25.656 align:middle
todo está roto! ¡Maldita sea!

00:04:25.876 --> 00:04:27.306 align:middle
Pero ... ¡por

00:04:27.526 --> 00:04:28.246 align:middle
supuesto!

00:04:28.696 --> 00:04:32.316 align:middle
Ahora está usando ese token
falso de la bóveda dev.

00:04:33.146 --> 00:04:35.286 align:middle
Funciona bien en producción... pero

00:04:35.616 --> 00:04:39.356 align:middle
¿cómo puedo arreglar mi configuración
local para seguir trabajando?

00:04:40.116 --> 00:04:45.516 align:middle
Podríamos anular temporalmente el valor
secreto de GITHUB_TOKEN en la bóveda de dev

00:04:46.016 --> 00:04:48.286 align:middle
ejecutando el comando secrets:set. Pero...

00:04:49.006 --> 00:04:50.876 align:middle
¡eso es una tontería! Tendríamos

00:04:51.476 --> 00:04:56.356 align:middle
que ser muy cuidadosos para no confirmar el
archivo modificado y encriptado. Antes de

00:04:57.146 --> 00:05:01.436 align:middle
arreglar esto, quiero mostrarte un
comando muy útil para la bóveda: php

00:05:01.436 --> 00:05:08.276 align:middle
bin/console secrets:list Sí, esto te muestra
todos los secretos de nuestra bóveda. ¡ Es

00:05:08.576 --> 00:05:09.186 align:middle
genial! E

00:05:09.946 --> 00:05:14.486 align:middle
incluso puedes pasar --reveal
para revelar el valor...

00:05:14.876 --> 00:05:16.886 align:middle
siempre que tengas la clave decrypt. Te

00:05:17.736 --> 00:05:21.056 align:middle
habrás dado cuenta de que nos
da el valor justo aquí... pero

00:05:21.506 --> 00:05:25.096 align:middle
luego dice "Valor local" con
un espacio en blanco. Hmm...

00:05:25.646 --> 00:05:30.466 align:middle
Vuelve a ejecutar el comando, pero
esta vez añade --env=prod. Y...

00:05:31.006 --> 00:05:32.586 align:middle
¡lo mismo! Esto

00:05:32.876 --> 00:05:35.146 align:middle
nos muestra el valor real de prod ... pero

00:05:35.506 --> 00:05:38.786 align:middle
sigue habiendo este punto de "Valor
local" sin nada. Este "Valor Local

00:05:39.536 --> 00:05:43.936 align:middle
" es la clave para arreglar nuestra
configuración rota de dev: es

00:05:44.316 --> 00:05:49.446 align:middle
una forma de anular un secreto, pero sólo
localmente en nuestra única máquina. ¿Cómo se

00:05:50.206 --> 00:05:53.176 align:middle
establece este valor local de anulación? Copia

00:05:53.856 --> 00:05:59.046 align:middle
el valor real de GITHUB_TOKEN,
luego muévete, busca .env.local -el

00:05:59.546 --> 00:06:03.886 align:middle
mismo archivo en el que hemos estado
trabajando- y di GITHUB_TOKEN= y

00:06:04.046 --> 00:06:06.756 align:middle
pega el valor que acabamos de copiar. ¡Sí!

00:06:07.486 --> 00:06:12.046 align:middle
Localmente, ¡vamos a aprovechar que

00:06:12.076 --> 00:06:15.356 align:middle
las variables de entorno "ganan"
a los secretos! De vuelta

00:06:16.106 --> 00:06:21.296 align:middle
a tu terminal, ejecuta de nuevo php
bin/console secrets:list --reveal . ¡Sí!

00:06:22.216 --> 00:06:25.786 align:middle
El valor oficial en la
bóveda es "CHANGEME"... pero

00:06:26.236 --> 00:06:33.596 align:middle
el valor local es nuestro token real que, como
sabemos, anulará el secreto y se utilizará. Si

00:06:34.486 --> 00:06:35.956 align:middle
volvemos a probar la página...

00:06:36.286 --> 00:06:38.986 align:middle
¡funciona! ¡Bien, equipo! Ya estamos...

00:06:39.176 --> 00:06:40.186 align:middle
bueno... ¡básicamente

00:06:40.426 --> 00:06:41.646 align:middle
hecho! Así que , como

00:06:42.046 --> 00:06:46.816 align:middle
recompensa por vuestro duro trabajo en
estos temas tan importantes, vamos a

00:06:47.276 --> 00:06:52.466 align:middle
celebrarlo utilizando la biblioteca
generadora de código de Symfony MakerBundle
