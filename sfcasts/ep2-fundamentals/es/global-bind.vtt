WEBVTT

00:00:01.036 --> 00:00:06.086 align:middle
En la práctica, rara vez necesitas
hacer algo dentro de services.yaml.

00:00:06.506 --> 00:00:12.196 align:middle
La mayoría de las veces, cuando añades un argumento
al constructor de un servicio, éste es autoinstalable.

00:00:12.676 --> 00:00:15.396 align:middle
Así que añades el argumento,
le das una pista de tipo...

00:00:15.726 --> 00:00:17.516 align:middle
¡y sigues codificando!

00:00:18.306 --> 00:00:21.506 align:middle
Pero el argumento $isDebug
no es autoconductible...

00:00:21.646 --> 00:00:23.236 align:middle
ya que no es un servicio.

00:00:23.816 --> 00:00:28.146 align:middle
Y eso nos obligó a anular
completamente el servicio

00:00:28.416 --> 00:00:31.796 align:middle
para poder especificar ese
único argumento con bind.

00:00:32.516 --> 00:00:34.006 align:middle
Funciona pero...

00:00:34.416 --> 00:00:34.886 align:middle
eso fue...

00:00:35.056 --> 00:00:38.786 align:middle
un montón de texto para
hacer una cosa tan pequeña

00:00:39.586 --> 00:00:41.486 align:middle
Así que he aquí una solución diferente.

00:00:41.916 --> 00:00:49.076 align:middle
Copia esa tecla bind, borra el servicio por
completo, y arriba, bajo _defaults, pega.

00:00:49.946 --> 00:00:51.886 align:middle
Cuando nos movemos y probamos esto...

00:00:52.616 --> 00:00:54.486 align:middle
¡la página sigue funcionando!

00:00:54.576 --> 00:00:55.766 align:middle
¿No es genial?

00:00:56.426 --> 00:00:57.646 align:middle
Y tiene sentido.

00:00:57.946 --> 00:01:02.706 align:middle
Esta sección registrará automáticamente
MixRepository como servicio...

00:01:03.246 --> 00:01:08.826 align:middle
y entonces todo lo que esté bajo
_defaults se aplicará a ese servicio.

00:01:09.186 --> 00:01:12.046 align:middle
Así que el resultado final es
exactamente el que teníamos antes.

00:01:12.746 --> 00:01:14.406 align:middle
¡Me encanta hacer esto!

00:01:15.006 --> 00:01:18.256 align:middle
Me permite establecer convenciones
para todo el proyecto.

00:01:19.046 --> 00:01:23.546 align:middle
Ahora que tenemos esto, podemos añadir
un argumento $isDebug al constructor

00:01:23.546 --> 00:01:26.526 align:middle
de cualquier servicio y
funcionará al instante.

00:01:27.316 --> 00:01:31.896 align:middle
Por cierto, si quieres, también
puedes incluir el tipo con el bind.

00:01:32.486 --> 00:01:37.736 align:middle
Así que ahora sólo funcionaría si
utilizamos el tipo bool con el argumento.

00:01:38.446 --> 00:01:43.716 align:middle
Si usáramos string, por ejemplo,
Symfony no intentaría pasar ese valor.

00:01:44.476 --> 00:01:47.286 align:middle
Así que el bind global es genial.

00:01:47.736 --> 00:01:55.406 align:middle
Pero a partir de Symfony 6.1, hay otra forma
de especificar un argumento no autocontenido.

00:01:56.166 --> 00:01:57.536 align:middle
Comenta el global bind.

00:01:58.346 --> 00:02:00.156 align:middle
Todavía me gusta hacer esto...

00:02:00.246 --> 00:02:02.486 align:middle
pero vamos a probar la nueva forma.

00:02:03.196 --> 00:02:07.306 align:middle
Si actualizamos ahora, obtendremos
un error porque Symfony no sabe qué

00:02:07.306 --> 00:02:09.466 align:middle
pasar al argumento $isDebug.

00:02:10.176 --> 00:02:17.486 align:middle
Para solucionarlo, entra en MixRepository y,
por encima del argumento (o antes del argumento

00:02:17.566 --> 00:02:23.416 align:middle
si no estás usando varias líneas), añade
un atributo de PHP 8 llamado Autowire.

00:02:24.236 --> 00:02:30.286 align:middle
Normalmente, los atributos de PHP 8 se
autocompletan, pero este no se autocompleta para mí.

00:02:31.006 --> 00:02:33.516 align:middle
Esto se debe a un error en PhpStorm.

00:02:34.206 --> 00:02:37.016 align:middle
Para evitarlo, voy a escribir Autowire...

00:02:37.546 --> 00:02:42.356 align:middle
y luego ir a la parte superior y empezar a
añadir la declaración use para esto manualmente,

00:02:42.816 --> 00:02:45.686 align:middle
lo que nos da una opción de autocompletar.

00:02:46.206 --> 00:02:47.606 align:middle
Pulsa "tab" y...

00:02:47.716 --> 00:02:51.896 align:middle
¡tah dah! Si quieres hacerlos por
orden alfabético, puedes moverlo.

00:02:53.316 --> 00:02:56.616 align:middle
También puedes observar que
está subrayado con un mensaje

00:02:56.996 --> 00:02:59.026 align:middle
No se puede aplicar un
atributo a una propiedad [ ...]

00:02:59.646 --> 00:03:06.406 align:middle
De nuevo, PhpStorm está un poco confundido porque esto
es tanto una propiedad como un argumento. De todos modos,

00:03:07.216 --> 00:03:12.866 align:middle
sigue adelante y pasa esto como un
argumento %kernel.debug%. Actualiza

00:03:13.646 --> 00:03:15.536 align:middle
ahora y...

00:03:16.046 --> 00:03:18.096 align:middle
¡lo tienes! Bastante bien,
¿verdad? Lo siguiente: la

00:03:19.046 --> 00:03:24.116 align:middle
mayoría de las veces, cuando se autoconduce
un argumento como HttpClientInterface,

00:03:24.406 --> 00:03:28.686 align:middle
sólo hay un servicio en el contenedor
que implementa esa interfaz. Pero,

00:03:29.276 --> 00:03:32.686 align:middle
¿y si hubiera varios clientes
HTTP en nuestro contenedor? ¿Cómo

00:03:33.286 --> 00:03:36.266 align:middle
podríamos elegir el que queremos? Es

00:03:36.886 --> 00:03:39.586 align:middle
hora de hablar del autocableado con nombre
