WEBVTT

00:00:01.026 --> 00:00:03.876 align:middle
Acabamos de instalar KnpTimeBundle.

00:00:04.106 --> 00:00:06.386 align:middle
¡Hurra! Um...

00:00:06.546 --> 00:00:07.326 align:middle
pero... eh...

00:00:07.606 --> 00:00:09.686 align:middle
¿qué significa eso?

00:00:10.176 --> 00:00:12.616 align:middle
¿Qué nos da eso?

00:00:13.176 --> 00:00:16.476 align:middle
Lo primero que nos da un bundle es...

00:00:16.746 --> 00:00:20.856 align:middle
¡servicios! ¿Qué
servicios nos da este bundle?

00:00:21.386 --> 00:00:26.486 align:middle
Bueno, podríamos, por supuesto,
leer la documentación, bla, bla.

00:00:27.086 --> 00:00:28.896 align:middle
Bueno, vale, deberías hacerlo...

00:00:29.136 --> 00:00:29.986 align:middle
pero, ¡vamos!

00:00:30.246 --> 00:00:34.776 align:middle
¡Aventurémonos con temeridad
y aprendamos explorando!

00:00:35.576 --> 00:00:41.356 align:middle
En el último tutorial, conocimos un comando que nos
muestra todos los servicios de nuestra aplicación:

00:00:41.686 --> 00:00:46.686 align:middle
debug:autowiring: Por
ejemplo, si buscamos "logger",

00:00:47.246 --> 00:00:50.736 align:middle
parece que hay un servicio
llamado LoggerInterface.

00:00:51.346 --> 00:00:55.736 align:middle
También aprendimos que podemos autoconectar
cualquier servicio de esta lista

00:00:55.836 --> 00:00:58.606 align:middle
en nuestro controlador utilizando su tipo.

00:00:59.856 --> 00:01:06.486 align:middle
Utilizando este tipo LoggerInterface -que
en realidad es Psr\Log\LoggerInterface -

00:01:06.986 --> 00:01:09.766 align:middle
Symfony sabe que debe pasarnos este servicio.

00:01:10.346 --> 00:01:15.116 align:middle
Entonces, aquí abajo, llamamos a métodos
sobre él como $logger->info().

00:01:15.936 --> 00:01:22.296 align:middle
Hemos instalado KnpTimeBundle hace un
momento, así que busquemos "tiempo": Y...

00:01:22.676 --> 00:01:24.076 align:middle
¡eh! ¡Mira esto!

00:01:24.436 --> 00:01:27.586 align:middle
¡Tenemos un nuevo servicio DateTimeFormatter!

00:01:28.036 --> 00:01:32.126 align:middle
Es del nuevo bundle y seguro
que es lo que buscamos.

00:01:32.816 --> 00:01:34.756 align:middle
Vamos a utilizarlo en nuestro controlador.

00:01:35.376 --> 00:01:41.186 align:middle
La pista de tipo que necesitamos es
Knp\Bundle\TimeBundle\DateTimeFormatter.

00:01:41.776 --> 00:01:46.216 align:middle
Vale, en VinylController, busca
browse(), y añade el nuevo argumento.

00:01:46.886 --> 00:01:51.026 align:middle
Por cierto, el orden de los
argumentos no importa...

00:01:51.446 --> 00:01:54.496 align:middle
excepto cuando se trata
de argumentos opcionales.

00:01:55.246 --> 00:01:57.306 align:middle
He hecho que el argumento $slug sea opcional

00:01:57.716 --> 00:02:02.466 align:middle
y normalmente necesitas tus argumentos
opcionales al final de la lista.

00:02:02.926 --> 00:02:08.676 align:middle
Así que añadiré DateTimeFormatter justo aquí y pulsaré
"tab" para añadir la declaración use en la parte superior.

00:02:09.546 --> 00:02:17.316 align:middle
Podemos nombrar el argumento como queramos, como
$sherlockHolmes o $timeFormatter: Para usar esto,

00:02:17.586 --> 00:02:25.266 align:middle
haz un bucle sobre las mezclas - foreach ($mixes
as $key => $mix): luego, en cada una, añade

00:02:25.736 --> 00:02:32.346 align:middle
una nueva clave ago: $mixes[$key]['ago'] =...

00:02:32.826 --> 00:02:35.316 align:middle
y aquí es donde necesitamos el nuevo servicio.

00:02:36.016 --> 00:02:38.516 align:middle
¿Cómo utilizamos el DateTimeFormatter?

00:02:39.046 --> 00:02:40.356 align:middle
¡No tengo ni idea!

00:02:40.986 --> 00:02:46.516 align:middle
Pero hemos utilizado su tipo, así que
PhpStorm debería decirnos qué métodos tiene.

00:02:47.306 --> 00:02:48.806 align:middle
Escribe $timeFormatter->...

00:02:49.186 --> 00:02:52.486 align:middle
y ¡bien! Tiene 4 métodos públicos.

00:02:52.986 --> 00:02:55.976 align:middle
El que queremos es formatDiff().

00:02:56.606 --> 00:02:57.916 align:middle
Pásale el tiempo "desde"...

00:02:58.246 --> 00:03:03.356 align:middle
que es $mix['createdAt']: ¡Eso
es todo lo que necesitamos!

00:03:04.086 --> 00:03:10.456 align:middle
Estamos haciendo un bucle sobre estos $mixes, tomando la
clave createdAt, que es un objeto DateTime, pasándolo

00:03:10.886 --> 00:03:17.256 align:middle
al método formatDiff(), que debería
devolver una cadena con el formato "ago ".

00:03:18.076 --> 00:03:22.636 align:middle
Para ver si esto funciona, a
continuación, dd($mixes): ¡Probemos!

00:03:23.016 --> 00:03:24.586 align:middle
Gira, refresca...

00:03:25.046 --> 00:03:26.696 align:middle
y abramos.

00:03:27.286 --> 00:03:30.906 align:middle
¡Sí! Mira esto: "ago" => "7 months ago"...

00:03:31.126 --> 00:03:33.056 align:middle
"ago" => "18 days ago"...

00:03:33.306 --> 00:03:43.686 align:middle
Funciona. Así que elimina ese volcado: Y ahora que cada
mezcla tiene un nuevo campo ago, en browse.html.twig,

00:03:44.416 --> 00:03:51.776 align:middle
sustituye el código mix.createdAt|date
por mix.ago: Y ahora...

00:03:52.946 --> 00:03:54.156 align:middle
mucho mejor.

00:03:54.816 --> 00:03:56.586 align:middle
Así que: teníamos un problema...

00:03:56.936 --> 00:04:00.086 align:middle
y sabíamos que debía ser
resuelto por un servicio...

00:04:00.336 --> 00:04:02.256 align:middle
porque los servicios sí funcionan.

00:04:02.776 --> 00:04:05.876 align:middle
Todavía no teníamos un servicio
que hiciera lo que necesitábamos,

00:04:06.386 --> 00:04:09.156 align:middle
así que salimos, encontramos
uno y lo instalamos.

00:04:09.756 --> 00:04:11.166 align:middle
¡Problema resuelto!

00:04:11.926 --> 00:04:17.746 align:middle
El propio Symfony tiene un montón de paquetes diferentes,
y cada uno de ellos nos proporciona varios servicios.

00:04:18.286 --> 00:04:22.726 align:middle
Pero a veces necesitarás un bundle de
terceros como éste para hacer el trabajo.

00:04:23.416 --> 00:04:27.076 align:middle
Normalmente, basta con buscar en Internet
el problema que intentas resolver,

00:04:27.216 --> 00:04:29.586 align:middle
más "Symfony bundle", para encontrarlo.

00:04:30.466 --> 00:04:34.386 align:middle
Además del bonito servicio
DateTimeFormatter que acabamos de utilizar,

00:04:34.876 --> 00:04:38.096 align:middle
este bundle también nos
proporcionó otro servicio.

00:04:38.816 --> 00:04:44.676 align:middle
Pero no es un servicio que debamos utilizar
directamente, como en el controlador.

00:04:45.306 --> 00:04:50.316 align:middle
No Este servicio está destinado a
ser utilizado por el propio Twig...

00:04:50.686 --> 00:04:54.086 align:middle
¡para alimentar un nuevo filtro Twig!

00:04:54.676 --> 00:04:55.206 align:middle
¡Así es!

00:04:55.476 --> 00:04:57.946 align:middle
Puedes añadir funciones
personalizadas, filtros...

00:04:58.076 --> 00:04:59.616 align:middle
o cualquier cosa a Twig.

00:05:00.386 --> 00:05:04.246 align:middle
Para ver el nuevo filtro, vamos a probar
otro útil comando de depuración:

00:05:04.246 --> 00:05:11.496 align:middle
php bin/console debug:twig Esto imprime
una lista de todas las funciones, filtros

00:05:11.616 --> 00:05:16.966 align:middle
y pruebas de Tw ig , junto con la única
variable global de Twig que tenemos.

00:05:17.746 --> 00:05:22.326 align:middle
Si subes a Filtros, ¡hay
uno nuevo llamado "hace"!

00:05:22.706 --> 00:05:26.316 align:middle
Eso no estaba allí antes de
que instaláramos KnpTimeBundle.

00:05:26.916 --> 00:05:31.316 align:middle
Así que todo el trabajo que hicimos en
nuestro controlador está perfectamente bien...

00:05:31.676 --> 00:05:35.876 align:middle
pero resulta que hay una forma
más fácil de hacer todo esto.

00:05:36.616 --> 00:05:37.506 align:middle
Elimina el foreach...

00:05:37.876 --> 00:05:40.016 align:middle
elimina el servicio DateTimeFormatter...

00:05:40.656 --> 00:05:48.086 align:middle
y, aunque es opcional, limpia la declaración extra
use de la parte superior: En browse.html.twig,

00:05:48.746 --> 00:05:50.886 align:middle
ya no tenemos un campo ago...

00:05:51.386 --> 00:05:53.746 align:middle
pero seguimos teniendo un campo createdAt.

00:05:54.616 --> 00:06:00.796 align:middle
En lugar de canalizarlo en el filtro date,
canalízalo en ago: ¡Eso es todo lo que necesitamos!

00:06:01.406 --> 00:06:04.286 align:middle
Volvemos a la actualización del sitio y...

00:06:04.646 --> 00:06:07.246 align:middle
obtenemos exactamente el mismo resultado. Por

00:06:08.146 --> 00:06:12.776 align:middle
cierto, no lo haremos en este
tutorial, pero al final, podrás

00:06:13.206 --> 00:06:16.276 align:middle
seguir fácilmente la documentación

00:06:16.646 --> 00:06:19.606 align:middle
para crear tus propias funciones
y filtros Twig personalizados.

00:06:20.416 --> 00:06:23.416 align:middle
Bien, nuestra aplicación aún
no tiene una base de datos...

00:06:23.846 --> 00:06:26.266 align:middle
y no la tendrá hasta el próximo episodio.

00:06:26.876 --> 00:06:30.526 align:middle
Pero para hacer las cosas más interesantes,
vamos a obtener los datos de nuestras mezclas

00:06:30.916 --> 00:06:35.196 align:middle
haciendo una llamada HTTP a un
repositorio especial de GitHub.

00:06:35.806 --> 00:06:36.786 align:middle
Eso a continuación
