WEBVTT

00:00:01.016 --> 00:00:05.736 align:middle
Sabemos que existe este concepto de contenedor
que contiene todos nuestros servicios...

00:00:06.146 --> 00:00:11.886 align:middle
y podemos ver la lista completa de servicios ejecutando:
php bin/console debug:container Pues bien, resulta

00:00:12.186 --> 00:00:17.276 align:middle
que el contenedor guarda otra cosa: rencores.

00:00:17.736 --> 00:00:22.636 align:middle
En serio, no esperes gastar una broma al
contenedor de servicios y salirte con la tuya.

00:00:23.456 --> 00:00:28.546 align:middle
Vale, lo que realmente guarda, además
de los servicios, son parámetros.

00:00:29.076 --> 00:00:34.196 align:middle
Son simples valores de configuración, y
podemos verlos ejecutando un comando similar:

00:00:34.786 --> 00:00:36.246 align:middle
php bin/console debug:container

00:00:36.416 --> 00:00:43.486 align:middle
--parameters Son básicamente variables que
puedes leer y referenciar en tu código.

00:00:44.176 --> 00:00:46.656 align:middle
En realidad, no tenemos que
preocuparnos por la mayoría de ellos.

00:00:47.086 --> 00:00:51.706 align:middle
Son establecidas por cosas internas
y utilizadas por cosas internas.

00:00:52.366 --> 00:00:58.816 align:middle
Pero hay algunas que empiezan por kernel que son
bastante interesantes, como kernel.project_dir,

00:00:59.346 --> 00:01:01.966 align:middle
que apunta al directorio de nuestro proyecto.

00:01:02.606 --> 00:01:09.176 align:middle
Sí, si alguna vez necesitas una forma de referirte al
directorio de tu aplicación, este parámetro puede ayudarte.

00:01:10.086 --> 00:01:12.486 align:middle
Entonces... ¿cómo
utilizamos estos parámetros?

00:01:13.006 --> 00:01:14.296 align:middle
Hay dos maneras.

00:01:14.806 --> 00:01:20.146 align:middle
En primer lugar, no es súper común, pero puedes
obtener un parámetro en tu controlador. Por

00:01:20.876 --> 00:01:26.086 align:middle
ejemplo, en VinylController, vamos
a dd($this->getParameter())

00:01:26.586 --> 00:01:28.096 align:middle
-que es un método abreviado

00:01:28.146 --> 00:01:32.616 align:middle
de AbstractController - y
luego a kernel.project_dir.

00:01:33.416 --> 00:01:38.256 align:middle
¡Incluso obtenemos un bonito autocompletado
gracias al plugin Symfony PhpStorm!

00:01:38.896 --> 00:01:40.226 align:middle
Y cuando lo probamos...

00:01:40.886 --> 00:01:42.086 align:middle
¡sí! ¡Ahí está!

00:01:42.656 --> 00:01:43.836 align:middle
Ahora... borra eso.

00:01:44.576 --> 00:01:49.966 align:middle
Esto funciona, pero la mayoría de las veces,
la forma de utilizar los parámetros es

00:01:49.966 --> 00:01:53.596 align:middle
haciendo referencia a ellos en
tus archivos de configuración.

00:01:54.096 --> 00:01:55.806 align:middle
¡Y esto ya lo hemos visto antes!

00:01:56.566 --> 00:01:59.056 align:middle
Abre config/packages/twig.yaml.

00:01:59.706 --> 00:02:01.606 align:middle
¿Recuerdas ese default_path?

00:02:02.156 --> 00:02:06.196 align:middle
Eso es hacer referencia al
parámetro kernel.project_dir.

00:02:06.976 --> 00:02:13.416 align:middle
Cuando estés en cualquiera de estos archivos de configuración
de .yaml y quieras hacer referencia a un parámetro,

00:02:13.786 --> 00:02:18.946 align:middle
puedes utilizar esta sintaxis
especial: %, el nombre del parámetro,

00:02:19.176 --> 00:02:22.926 align:middle
y luego otro %. Abre cache.yaml.

00:02:23.806 --> 00:02:28.366 align:middle
Estamos configurando cache.adapter como
filesystem para todos los entornos.

00:02:29.046 --> 00:02:33.986 align:middle
Luego, lo estamos anulando para que sea el
adaptador array sólo en el entorno dev.

00:02:34.746 --> 00:02:38.556 align:middle
Vamos a ver si podemos acortar
esto creando un nuevo parámetro.

00:02:39.176 --> 00:02:41.176 align:middle
¿Cómo se crean los parámetros?

00:02:41.706 --> 00:02:45.746 align:middle
En cualquiera de estos archivos, añade
una clave raíz llamada parameters.

00:02:46.486 --> 00:02:47.926 align:middle
Debajo de ella, puedes simplemente...

00:02:48.206 --> 00:02:49.156 align:middle
inventar un nombre.

00:02:49.646 --> 00:02:56.656 align:middle
Lo llamaré cache_adapter, y ponle
nuestro valor: cache.adapter.filesystem.

00:02:57.686 --> 00:03:03.096 align:middle
Si tienes una clave raíz framework, Symfony
pasará toda la configuración a FrameworkBun dle.

00:03:03.806 --> 00:03:06.826 align:middle
Lo mismo ocurre con la clave twig y TwigBundle.

00:03:07.656 --> 00:03:13.726 align:middle
Pero parameters es especial: todo lo que esté
por debajo de ella creará un parámetro.

00:03:14.516 --> 00:03:18.756 align:middle
Así que sí... ahora tenemos un
nuevo parámetro cache.adapter...

00:03:19.116 --> 00:03:21.666 align:middle
que aún no estamos utilizando.

00:03:22.466 --> 00:03:24.846 align:middle
¡Pero ya podemos verlo!

00:03:25.676 --> 00:03:30.706 align:middle
Ejecuta: php bin/console debug:container
--parameters Cerca de la parte superior...

00:03:31.216 --> 00:03:33.256 align:middle
ahí está: ¡ cache_adapter!

00:03:33.956 --> 00:03:40.616 align:middle
Para usarlo, aquí abajo
para app, di %cache_adapter%.

00:03:41.176 --> 00:03:42.286 align:middle
Eso es todo.

00:03:43.016 --> 00:03:50.296 align:middle
Nota rápida: Te habrás dado cuenta de que a
veces utilizo comillas en YAML y a veces no.

00:03:50.916 --> 00:03:54.686 align:middle
La mayoría de las veces, en YAML, no
es necesario utilizar las comillas...

00:03:55.046 --> 00:03:56.986 align:middle
pero siempre puedes hacerlo.

00:03:57.746 --> 00:04:03.056 align:middle
Y si alguna vez no estás seguro de si son
necesarias o no, mejor estar seguro y utilizarlas.

00:04:03.776 --> 00:04:08.236 align:middle
Los parámetros son, de hecho, un ejemplo
en el que las comillas son necesarias.

00:04:08.866 --> 00:04:11.346 align:middle
Si no lo rodeáramos con com illas,

00:04:11.836 --> 00:04:15.716 align:middle
parecería una sintaxis especial
de YAML y arrojaría un error. De

00:04:16.746 --> 00:04:22.016 align:middle
todos modos, en el entorno dev, en
lugar de decir framework, cache, y app,

00:04:22.566 --> 00:04:25.426 align:middle
lo único que tenemos que
hacer es anular ese parámetro.

00:04:26.046 --> 00:04:29.826 align:middle
Diré parameters, luego cache_adapter...

00:04:30.446 --> 00:04:33.416 align:middle
y lo pondré en cache.adapter.array.

00:04:34.316 --> 00:04:38.276 align:middle
Para ver si eso funciona, gira aquí
y ejecuta otro comando de ayuda:

00:04:38.276 --> 00:04:43.286 align:middle
php bin/console debug:config
framework cache Recuerda que

00:04:43.616 --> 00:04:47.826 align:middle
debug:config te mostrará cuál
es tu configuración actual

00:04:48.036 --> 00:04:51.796 align:middle
bajo la clave framework,
y luego la subclave cache.

00:04:52.596 --> 00:04:56.756 align:middle
Y aquí puedes ver que app está
configurado como cache.adapter.array,

00:04:57.146 --> 00:04:59.496 align:middle
el valor resuelto para el parámetro.

00:05:00.316 --> 00:05:02.966 align:middle
Comprobemos el valor en el entorno prod...

00:05:03.276 --> 00:05:05.886 align:middle
para asegurarnos de que
también está bien allí.

00:05:06.756 --> 00:05:10.836 align:middle
Cuando ejecutes cualquier comando de
bin/console, ese comando se ejecutará

00:05:10.836 --> 00:05:13.696 align:middle
en el mismo entorno en el que se
esté ejecutando tu aplicación.

00:05:14.286 --> 00:05:18.466 align:middle
Así que cuando ejecutamos debug:config,
eso se ejecuta en el entorno dev.

00:05:19.156 --> 00:05:23.706 align:middle
Para ejecutar el comando en el
entorno prod, podríamos ir aquí

00:05:23.706 --> 00:05:27.356 align:middle
y cambiar APP_ENV por prod temporalmente...

00:05:28.136 --> 00:05:30.116 align:middle
pero hay una forma más fácil.

00:05:30.836 --> 00:05:36.366 align:middle
Puedes anular el entorno al ejecutar cualquier
comando añadiendo una bandera al final.

00:05:37.176 --> 00:05:41.486 align:middle
Por ejemplo: php bin/console
debug:config framework cache

00:05:41.916 --> 00:05:49.156 align:middle
--env=prod Pero antes de intentarlo, siempre
tenemos que borrar nuestra caché primero

00:05:49.246 --> 00:05:51.366 align:middle
para ver los cambios en el entorno prod.

00:05:52.146 --> 00:05:55.436 align:middle
Hazlo ejecutando: php bin/console cache:clear

00:05:55.766 --> 00:06:04.996 align:middle
--env=prod Ahora prueba: php bin/console
debug:config framework cache --env=prod Y...

00:06:05.486 --> 00:06:06.136 align:middle
¡qué bonito!

00:06:06.696 --> 00:06:09.816 align:middle
Aparece cache.adapter.filesystem.

00:06:10.706 --> 00:06:13.626 align:middle
Así pues, el contenedor
también contiene parámetros.

00:06:14.186 --> 00:06:17.556 align:middle
Este no es un concepto súper
importante en Symfony, así que,

00:06:17.556 --> 00:06:20.696 align:middle
mientras entiendas cómo
funcionan, estás bien.

00:06:21.586 --> 00:06:24.676 align:middle
Bien, volvamos a la inyección de dependencias.

00:06:25.416 --> 00:06:29.056 align:middle
Sabemos que podemos autoinyectar
servicios en el constructor

00:06:29.056 --> 00:06:32.246 align:middle
de un servicio o en los
métodos del controlador.

00:06:32.916 --> 00:06:36.846 align:middle
¿Pero qué pasa si necesitamos
pasar algo que no es autoconectable?

00:06:37.446 --> 00:06:41.756 align:middle
Por ejemplo, ¿qué pasa si queremos pasar
uno de estos parámetros a un servicio?

00:06:42.316 --> 00:06:44.536 align:middle
Averigüemos cómo funciona eso a continuación
