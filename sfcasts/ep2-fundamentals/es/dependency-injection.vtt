WEBVTT

00:00:00.996 --> 00:00:04.816 align:middle
Nuestro servicio MixRepository
está funcionando más o menos.

00:00:05.186 --> 00:00:07.346 align:middle
Podemos autoconectarlo a nuestro controlador

00:00:07.426 --> 00:00:11.626 align:middle
y el contenedor está instanciando
el objeto y pasándonoslo.

00:00:12.376 --> 00:00:16.216 align:middle
Lo comprobamos aquí porque,
cuando ejecutamos el código,

00:00:16.516 --> 00:00:19.316 align:middle
llama con éxito al método findAll().

00:00:19.876 --> 00:00:22.846 align:middle
Pero .... luego explota.

00:00:23.346 --> 00:00:29.276 align:middle
Eso es porque, dentro de MixRepository
tenemos dos variables indefinidas.

00:00:30.016 --> 00:00:34.866 align:middle
Para que nuestra clase haga su
trabajo, necesita dos servicios:

00:00:35.206 --> 00:00:39.136 align:middle
el servicio $cache y el servicio $httpClient.

00:00:39.806 --> 00:00:44.176 align:middle
Sigo diciendo que hay muchos
servicios flotando dentro

00:00:44.176 --> 00:00:46.566 align:middle
de Symfony, esperando a que los usemos.

00:00:47.116 --> 00:00:48.286 align:middle
Eso es cierto.

00:00:48.716 --> 00:00:54.156 align:middle
Pero, no puedes cogerlos de la nada
desde cualquier parte de tu código. Por

00:00:54.676 --> 00:01:02.466 align:middle
ejemplo, no hay ningún método estático de
Cache::get() que puedas llamar cuando quieras

00:01:02.686 --> 00:01:05.676 align:middle
y que devuelva el objeto de servicio $cache.

00:01:06.146 --> 00:01:09.006 align:middle
No existe nada parecido en Symfony.

00:01:09.446 --> 00:01:10.486 align:middle
¡Y eso es bueno!

00:01:11.066 --> 00:01:16.316 align:middle
Permitirnos coger objetos de la nada es
una receta para escribir mal código.

00:01:17.056 --> 00:01:20.496 align:middle
Entonces, ¿cómo podemos
acceder a estos servicios?

00:01:21.246 --> 00:01:26.226 align:middle
Actualmente, sólo conocemos una forma:
autocableándolos en nuestro controlador.

00:01:26.876 --> 00:01:29.396 align:middle
Pero eso no funcionará aquí.

00:01:30.126 --> 00:01:36.446 align:middle
El autocableado de servicios en un método es un
superpoder que sólo funciona para los controladores.

00:01:36.976 --> 00:01:40.546 align:middle
Observa: si añadimos un
argumento CacheInterface...

00:01:41.946 --> 00:01:47.426 align:middle
y luego pasamos y refrescamos, veríamos: Demasiados
argumentos para la función [...]findAll(),

00:01:47.426 --> 00:01:49.446 align:middle
0 pasados [...] y

00:01:49.446 --> 00:01:51.366 align:middle
exactamente 1 esperado. Eso es porque

00:01:52.036 --> 00:01:54.986 align:middle
estamos llamando a findAll(). Así que si

00:01:55.506 --> 00:01:59.936 align:middle
findAll() necesita un argumento,
es nuestra responsabilidad pasarlo

00:01:59.936 --> 00:02:03.426 align:middle
: no hay magia de Symfony. Lo que quiero

00:02:04.346 --> 00:02:08.296 align:middle
decir es que el autocableado funciona
en los métodos del controlador, pero no

00:02:08.576 --> 00:02:12.126 align:middle
esperes que funcione en
ningún otro método. Pero una

00:02:12.976 --> 00:02:20.106 align:middle
forma de conseguir que esto funcione es añadir
ambos servicios al método findAll() y luego

00:02:20.576 --> 00:02:23.996 align:middle
pasarlos manualmente desde
el controlador. Esta no

00:02:24.586 --> 00:02:28.026 align:middle
será la solución definitiva,
pero vamos a probarla. Ya

00:02:28.666 --> 00:02:31.266 align:middle
tengo un argumento
CacheInterface... así que ahora

00:02:31.806 --> 00:02:37.236 align:middle
añade el argumento HttpClientInterface
y llámalo $httpClient. ¡Perfecto! El

00:02:38.106 --> 00:02:41.916 align:middle
código de este método está
ahora contento. De vuelta

00:02:42.586 --> 00:02:50.326 align:middle
a nuestro controlador, para findAll(),
pasa $httpClient y $cache. Y ahora...

00:02:50.326 --> 00:02:50.956 align:middle
¡funciona!

00:02:52.236 --> 00:02:57.846 align:middle
Así que, a alto nivel, esta
solución tiene sentido. Sabemos

00:02:58.376 --> 00:03:02.446 align:middle
que podemos autoconducir servicios
a nuestro controlador... y luego

00:03:02.906 --> 00:03:06.416 align:middle
simplemente los pasamos
a MixRepository. Pero si

00:03:07.246 --> 00:03:11.156 align:middle
piensas un poco más en profundidad,
los servicios $httpClient y $cache

00:03:11.156 --> 00:03:16.176 align:middle
no son realmente una entrada a
la función findAll(). No tienen

00:03:16.716 --> 00:03:19.836 align:middle
realmente sentido como argumentos. Veamos

00:03:20.556 --> 00:03:21.786 align:middle
un ejemplo. Imagina que

00:03:22.346 --> 00:03:28.236 align:middle
decidimos cambiar el método findAll() para que
acepte un argumento string $genre para que el

00:03:28.676 --> 00:03:32.786 align:middle
método sólo devuelva mezclas
de ese género. Este argumento

00:03:33.476 --> 00:03:40.576 align:middle
tiene mucho sentido: al pasar diferentes
géneros cambia lo que devuelve. El argumento

00:03:41.176 --> 00:03:44.866 align:middle
controla el comportamiento del
método. Pero los argumentos

00:03:44.866 --> 00:03:51.696 align:middle
$httpClient y $cache no controlan el
comportamiento de la función. En realidad,

00:03:52.316 --> 00:03:58.626 align:middle
pasaríamos estos dos mismos valores cada
vez que llamemos al método... para que

00:03:59.046 --> 00:04:01.276 align:middle
las cosas funcionen. En lugar de

00:04:02.256 --> 00:04:07.626 align:middle
argumentos, son realmente dependencias
que el servicio necesita. Son

00:04:08.286 --> 00:04:13.836 align:middle
cosas que deben estar disponibles para que findAll()
pueda hacer su trabajo Para las "dependencias"

00:04:14.546 --> 00:04:21.826 align:middle
como ésta, ya sean objetos de servicio
o configuración estática que tu

00:04:21.826 --> 00:04:26.046 align:middle
servicio necesita, en lugar de
pasarlas a los métodos, las pasamos

00:04:26.336 --> 00:04:29.196 align:middle
al constructor. Elimina ese

00:04:30.086 --> 00:04:32.166 align:middle
supuesto argumento de $genre... y añade

00:04:32.746 --> 00:04:36.486 align:middle
un public function __construct(). Copia los

00:04:37.476 --> 00:04:42.116 align:middle
dos argumentos, bórralos y
muévelos hasta aquí. Antes de

00:04:43.116 --> 00:04:49.436 align:middle
terminar esto, tengo que decirte que el
autocableado funciona en dos sitios. Ya

00:04:50.186 --> 00:04:54.746 align:middle
sabemos que podemos autoconectar argumentos
en los métodos de nuestro controlador. Pero

00:04:55.376 --> 00:05:01.206 align:middle
también podemos autoconectar argumentos en el
método __construct() de cualquier servicio. De hecho,

00:05:01.846 --> 00:05:06.326 align:middle
¡éste es el lugar principal en el que se
supone que funciona la autoconexión! El hecho de

00:05:07.176 --> 00:05:11.876 align:middle
que la autoconexión también funcione
en los métodos del controlador es...

00:05:12.106 --> 00:05:15.016 align:middle
una especie de "extra" para hacer la vida más
agradable. En cualquier caso, la autoconexión

00:05:15.956 --> 00:05:20.476 align:middle
funciona en el método __construct()
de nuestros servicios. Así que,

00:05:20.946 --> 00:05:28.216 align:middle
siempre que indiquemos los argumentos (y lo hemos
hecho), cuando Symfony instancie nuestro servicio,

00:05:28.616 --> 00:05:31.656 align:middle
nos pasará estos dos servicios. ¡Sí! ¿Y

00:05:32.146 --> 00:05:36.846 align:middle
qué hacemos con estos dos
argumentos? Los establecemos

00:05:37.376 --> 00:05:39.386 align:middle
en propiedades. Creamos una propiedad

00:05:40.076 --> 00:05:44.886 align:middle
private $httpClient y una propiedad
private $cache. Luego, abajo,

00:05:45.616 --> 00:05:48.906 align:middle
en el constructor, les
asignamos: $this->httpClient =

00:05:48.946 --> 00:05:54.556 align:middle
$httpClient, y $this->cache
= $cache. Así, cuando

00:05:55.336 --> 00:06:01.676 align:middle
Symfony instancie nuestro MixRepository,
nos pasará estos dos argumentos y

00:06:02.176 --> 00:06:06.256 align:middle
los almacenaremos en propiedades para
poder utilizarlos más adelante. ¡Observa!

00:06:06.976 --> 00:06:11.786 align:middle
Aquí abajo, en lugar de $cache,
utiliza $this->cache. Y entonces no

00:06:12.656 --> 00:06:16.626 align:middle
necesitamos este use
($httpClient) de aquí... porque

00:06:17.056 --> 00:06:20.166 align:middle
podemos decir
$this->httpClient. Este servicio

00:06:21.006 --> 00:06:23.896 align:middle
está ahora en perfecto estado. De vuelta a

00:06:24.746 --> 00:06:28.686 align:middle
VinylController , ¡ahora podemos
simplificar! El método findAll()

00:06:29.316 --> 00:06:31.776 align:middle
no necesita ningún argumento
... y así ni siquiera

00:06:32.106 --> 00:06:38.156 align:middle
necesitamos autoconducir $httpClient
o $cache en absoluto. Voy a

00:06:38.646 --> 00:06:42.936 align:middle
celebrarlo eliminando esas declaraciones
use de la parte superior. ¡ Mira qué

00:06:43.756 --> 00:06:45.496 align:middle
fácil es! Autocableamos

00:06:45.916 --> 00:06:51.696 align:middle
el único servicio que necesitamos,
llamamos al método en él, y... ¡hasta

00:06:52.556 --> 00:06:54.326 align:middle
funciona! Así es

00:06:54.706 --> 00:06:57.116 align:middle
como escribimos servicios. Añadimos

00:06:57.746 --> 00:07:03.656 align:middle
las dependencias al constructor, las establecemos
en las propiedades y luego las utilizamos. Por

00:07:04.446 --> 00:07:10.786 align:middle
cierto, lo que acabamos de hacer tiene un nombre
extravagante: "inyección de dependencias". ¡ Pero no huyas

00:07:11.246 --> 00:07:12.166 align:middle
! Puede que

00:07:12.676 --> 00:07:14.186 align:middle
sea un término que asuste... o que al

00:07:14.406 --> 00:07:19.646 align:middle
menos suene "aburrido", pero es un
concepto muy sencillo. Cuando estás

00:07:20.376 --> 00:07:23.456 align:middle
dentro de un servicio como MixRepository y

00:07:23.956 --> 00:07:31.456 align:middle
te das cuenta de que necesitas otro servicio (o tal vez alguna
configuración como una clave de API), para obtenerlo, crea un

00:07:31.836 --> 00:07:37.286 align:middle
constructor, añade un argumento para lo que
necesitas, ponlo en una propiedad, y luego

00:07:37.676 --> 00:07:39.916 align:middle
úsalo abajo en tu código. Sí Eso
es la inyección de dependencia.

00:07:40.606 --> 00:07:43.216 align:middle
En pocas palabras, la inyección de

00:07:44.046 --> 00:07:49.926 align:middle
dependencia dice: Si necesitas
algo, en lugar de cogerlo de la nada

00:07:49.926 --> 00:07:55.226 align:middle
, obliga a Symfony a pasártelo a
través del constructor. Este es

00:07:55.976 --> 00:07:59.416 align:middle
uno de los conceptos más
importantes de Symfony... y

00:07:59.846 --> 00:08:02.666 align:middle
lo haremos una y otra vez. Bien, sin relación

00:08:03.566 --> 00:08:07.756 align:middle
con la inyección de dependencia
y el autocableado, hay

00:08:08.146 --> 00:08:11.546 align:middle
dos pequeñas mejoras que podemos
hacer a nuestro servicio. La primera

00:08:12.046 --> 00:08:15.746 align:middle
es que podemos añadir tipos a nuestras
propiedades: HttpClientInterface y

00:08:16.086 --> 00:08:19.156 align:middle
CacheInterface. Eso no

00:08:20.006 --> 00:08:22.596 align:middle
cambia el funcionamiento de
nuestro código... es sólo

00:08:22.756 --> 00:08:25.916 align:middle
una forma agradable y responsable
de hacer las cosas. ¡ Pero

00:08:26.546 --> 00:08:28.326 align:middle
podemos ir más allá! En PHP

00:08:28.916 --> 00:08:34.956 align:middle
8, hay una nueva sintaxis más corta para
crear una propiedad y establecerla en el

00:08:34.956 --> 00:08:36.956 align:middle
constructor como estamos haciendo.
Tiene el siguiente aspecto.

00:08:37.606 --> 00:08:38.606 align:middle
En primer lugar,

00:08:39.146 --> 00:08:42.386 align:middle
moveré mis argumentos a
varias líneas... sólo para

00:08:42.546 --> 00:08:44.326 align:middle
mantener las cosas organizadas. Ahora añade

00:08:45.246 --> 00:08:49.116 align:middle
la palabra private delante
de cada argumento. Termina

00:08:52.056 --> 00:08:53.716 align:middle
borrando las propiedades ... así como el

00:08:54.306 --> 00:08:56.386 align:middle
interior del método. Esto puede

00:08:57.246 --> 00:09:03.666 align:middle
parecer raro al principio, pero en cuanto añades
private, protected, o public delante de un argumento

00:09:03.666 --> 00:09:08.726 align:middle
__construct() , se crea una
propiedad con este nombre y se fija

00:09:09.146 --> 00:09:11.756 align:middle
el argumento en esa propiedad. Así que

00:09:12.606 --> 00:09:16.786 align:middle
parece diferente, pero es exactamente
lo mismo que teníamos antes. Cuando

00:09:17.576 --> 00:09:19.206 align:middle
lo probamos... ¡sí!

00:09:19.206 --> 00:09:21.146 align:middle
Sigue funcionando. Siguiente: Sigo

00:09:21.976 --> 00:09:25.816 align:middle
diciendo que el contenedor
contiene servicios. Es cierto

00:09:26.346 --> 00:09:27.256 align:middle
Pero

00:09:27.686 --> 00:09:33.666 align:middle
también contiene otra cosa: una simple
configuración llamada "parámetros"
